
Bootloader_f103cB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003330  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080039b8  080039b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b8  080039b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080039c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000078  08003a38  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003a38  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007984  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c0  00000000  00000000  00027a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e65  00000000  00000000  0002a380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d79  00000000  00000000  0003e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b65d  00000000  00000000  00044f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b05bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002320  00000000  00000000  000b0638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003424 	.word	0x08003424

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003424 	.word	0x08003424

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/* USER CODE END 0 */


int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f001 f8e8 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f900 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9ae 	bl	80004c8 <MX_GPIO_Init>
  MX_CRC_Init();
 800016c:	f000 f944 	bl	80003f8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f956 	bl	8000420 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000174:	f000 f97e 	bl	8000474 <MX_USART3_UART_Init>
//flash_testing();

  /* Lets check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == GPIO_PIN_SET )//modify button here
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	4809      	ldr	r0, [pc, #36]	; (80001a4 <main+0x48>)
 800017e:	f001 fdeb 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	2b01      	cmp	r3, #1
 8000186:	d105      	bne.n	8000194 <main+0x38>
  {

	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 8000188:	4807      	ldr	r0, [pc, #28]	; (80001a8 <main+0x4c>)
 800018a:	f000 f8c7 	bl	800031c <printmsg>

	  //we should continue in bootloader mode
	  bootloader_uart_read_data();
 800018e:	f000 f80f 	bl	80001b0 <bootloader_uart_read_data>
 8000192:	e004      	b.n	800019e <main+0x42>

  }
 else
  {
	  printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 8000194:	4805      	ldr	r0, [pc, #20]	; (80001ac <main+0x50>)
 8000196:	f000 f8c1 	bl	800031c <printmsg>

		//jump to user application
		bootloader_jump_to_user_app();
 800019a:	f000 f893 	bl	80002c4 <bootloader_jump_to_user_app>
 800019e:	2300      	movs	r3, #0

  }

}
 80001a0:	4618      	mov	r0, r3
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800
 80001a8:	0800343c 	.word	0x0800343c
 80001ac:	08003474 	.word	0x08003474

080001b0 <bootloader_uart_read_data>:


void  bootloader_uart_read_data(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0 ;
 80001b6:	2300      	movs	r3, #0
 80001b8:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 80001ba:	22c8      	movs	r2, #200	; 0xc8
 80001bc:	2100      	movs	r1, #0
 80001be:	483c      	ldr	r0, [pc, #240]	; (80002b0 <bootloader_uart_read_data+0x100>)
 80001c0:	f002 fd16 	bl	8002bf0 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		//if(HAL_UART_GetState(C_UART) != HAL_UART_STATE_BUSY){
			HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	2201      	movs	r2, #1
 80001ca:	4939      	ldr	r1, [pc, #228]	; (80002b0 <bootloader_uart_read_data+0x100>)
 80001cc:	4839      	ldr	r0, [pc, #228]	; (80002b4 <bootloader_uart_read_data+0x104>)
 80001ce:	f002 fb1b 	bl	8002808 <HAL_UART_Receive>

		//}

		rcv_len= bl_rx_buffer[0];
 80001d2:	4b37      	ldr	r3, [pc, #220]	; (80002b0 <bootloader_uart_read_data+0x100>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	71fb      	strb	r3, [r7, #7]
		if(rcv_len == 0){continue;}//to trim the padding /0 string character at the end
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d064      	beq.n	80002a8 <bootloader_uart_read_data+0xf8>
		//if(HAL_UART_GetState(C_UART) != HAL_UART_STATE_BUSY_TX_RX){
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	b29a      	uxth	r2, r3
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	4934      	ldr	r1, [pc, #208]	; (80002b8 <bootloader_uart_read_data+0x108>)
 80001e8:	4832      	ldr	r0, [pc, #200]	; (80002b4 <bootloader_uart_read_data+0x104>)
 80001ea:	f002 fb0d 	bl	8002808 <HAL_UART_Receive>

		//}
		switch(bl_rx_buffer[1])
 80001ee:	4b30      	ldr	r3, [pc, #192]	; (80002b0 <bootloader_uart_read_data+0x100>)
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	3b51      	subs	r3, #81	; 0x51
 80001f4:	2b0b      	cmp	r3, #11
 80001f6:	d847      	bhi.n	8000288 <bootloader_uart_read_data+0xd8>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <bootloader_uart_read_data+0x50>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000231 	.word	0x08000231
 8000204:	08000239 	.word	0x08000239
 8000208:	08000241 	.word	0x08000241
 800020c:	08000249 	.word	0x08000249
 8000210:	08000251 	.word	0x08000251
 8000214:	08000259 	.word	0x08000259
 8000218:	08000261 	.word	0x08000261
 800021c:	08000269 	.word	0x08000269
 8000220:	08000271 	.word	0x08000271
 8000224:	080002ad 	.word	0x080002ad
 8000228:	08000279 	.word	0x08000279
 800022c:	08000281 	.word	0x08000281
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000230:	481f      	ldr	r0, [pc, #124]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000232:	f000 f9c9 	bl	80005c8 <bootloader_handle_getver_cmd>
                break;
 8000236:	e03a      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800023a:	f000 fa0d 	bl	8000658 <bootloader_handle_gethelp_cmd>
                break;
 800023e:	e036      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000240:	481b      	ldr	r0, [pc, #108]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000242:	f000 fa45 	bl	80006d0 <bootloader_handle_getcid_cmd>
                break;
 8000246:	e032      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000248:	4819      	ldr	r0, [pc, #100]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800024a:	f000 fa8d 	bl	8000768 <bootloader_handle_getrdp_cmd>
                break;
 800024e:	e02e      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 8000250:	4817      	ldr	r0, [pc, #92]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000252:	f000 fad5 	bl	8000800 <bootloader_handle_go_cmd>
                break;
 8000256:	e02a      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800025a:	f000 fb3b 	bl	80008d4 <bootloader_handle_flash_erase_cmd>
                break;
 800025e:	e026      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000262:	f000 fba3 	bl	80009ac <bootloader_handle_mem_write_cmd>
                break;
 8000266:	e022      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000268:	4811      	ldr	r0, [pc, #68]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800026a:	f000 fc29 	bl	8000ac0 <bootloader_handle_en_rw_protect>
                break;
 800026e:	e01e      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000272:	f000 fcc3 	bl	8000bfc <bootloader_handle_mem_read>
                break;
 8000276:	e01a      	b.n	80002ae <bootloader_uart_read_data+0xfe>
            case BL_READ_SECTOR_P_STATUS:
               // bootloader_handle_read_sector_protection_status(bl_rx_buffer);
                break;
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800027a:	f000 fcc8 	bl	8000c0e <bootloader_handle_read_otp>
                break;
 800027e:	e016      	b.n	80002ae <bootloader_uart_read_data+0xfe>
			case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000282:	f000 fc6f 	bl	8000b64 <bootloader_handle_dis_rw_protect>
                break;
 8000286:	e012      	b.n	80002ae <bootloader_uart_read_data+0xfe>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <bootloader_uart_read_data+0x10c>)
 800028a:	f000 f847 	bl	800031c <printmsg>
                printmsg("BL_DEBUG_MSG: %d \n",bl_rx_buffer[1]);
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <bootloader_uart_read_data+0x100>)
 8000290:	785b      	ldrb	r3, [r3, #1]
 8000292:	4619      	mov	r1, r3
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <bootloader_uart_read_data+0x110>)
 8000296:	f000 f841 	bl	800031c <printmsg>
                printmsg("BL_DEBUG_MSG: %d \n",bl_rx_buffer[2]);
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <bootloader_uart_read_data+0x100>)
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	4619      	mov	r1, r3
 80002a0:	4807      	ldr	r0, [pc, #28]	; (80002c0 <bootloader_uart_read_data+0x110>)
 80002a2:	f000 f83b 	bl	800031c <printmsg>
                break;
 80002a6:	e002      	b.n	80002ae <bootloader_uart_read_data+0xfe>
		if(rcv_len == 0){continue;}//to trim the padding /0 string character at the end
 80002a8:	bf00      	nop
 80002aa:	e786      	b.n	80001ba <bootloader_uart_read_data+0xa>
                break;
 80002ac:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 80002ae:	e784      	b.n	80001ba <bootloader_uart_read_data+0xa>
 80002b0:	20000128 	.word	0x20000128
 80002b4:	200000a0 	.word	0x200000a0
 80002b8:	20000129 	.word	0x20000129
 80002bc:	080034b0 	.word	0x080034b0
 80002c0:	080034e8 	.word	0x080034e8

080002c4 <bootloader_jump_to_user_app>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80002ca:	480f      	ldr	r0, [pc, #60]	; (8000308 <bootloader_jump_to_user_app+0x44>)
 80002cc:	f000 f826 	bl	800031c <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <bootloader_jump_to_user_app+0x48>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80002d6:	68f9      	ldr	r1, [r7, #12]
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <bootloader_jump_to_user_app+0x4c>)
 80002da:	f000 f81f 	bl	800031c <printmsg>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f383 8808 	msr	MSP, r3
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <bootloader_jump_to_user_app+0x50>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <bootloader_jump_to_user_app+0x54>)
 80002f6:	f000 f811 	bl	800031c <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4798      	blx	r3

}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	080034fc 	.word	0x080034fc
 800030c:	08004000 	.word	0x08004000
 8000310:	08003528 	.word	0x08003528
 8000314:	08004004 	.word	0x08004004
 8000318:	08003548 	.word	0x08003548

0800031c <printmsg>:
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 800031c:	b40f      	push	{r0, r1, r2, r3}
 800031e:	b580      	push	{r7, lr}
 8000320:	b096      	sub	sp, #88	; 0x58
 8000322:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000328:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fc7a 	bl	8002c2c <vsiprintf>
	//here
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff05 	bl	800014c <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	f107 0108 	add.w	r1, r7, #8
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <printmsg+0x48>)
 8000350:	f002 f9c1 	bl	80026d6 <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000354:	bf00      	nop
 8000356:	3758      	adds	r7, #88	; 0x58
 8000358:	46bd      	mov	sp, r7
 800035a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800035e:	b004      	add	sp, #16
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	200000e8 	.word	0x200000e8

08000368 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fc3a 	bl	8002bf0 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fd01 	bl	8001db8 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003bc:	f000 f900 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 ff6c 	bl	80022b8 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f8eb 	bl	80005c0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80003ea:	f002 f84f 	bl	800248c <HAL_RCC_EnableCSS>
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	; 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_CRC_Init+0x20>)
 80003fe:	4a07      	ldr	r2, [pc, #28]	; (800041c <MX_CRC_Init+0x24>)
 8000400:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_CRC_Init+0x20>)
 8000404:	f001 f8db 	bl	80015be <HAL_CRC_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800040e:	f000 f8d7 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000e0 	.word	0x200000e0
 800041c:	40023000 	.word	0x40023000

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <MX_USART2_UART_Init+0x50>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_USART2_UART_Init+0x4c>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART2_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART2_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_USART2_UART_Init+0x4c>)
 8000458:	f002 f8f0 	bl	800263c <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000462:	f000 f8ad 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000e8 	.word	0x200000e8
 8000470:	40004400 	.word	0x40004400

08000474 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <MX_USART3_UART_Init+0x50>)
 800047c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 8000480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_USART3_UART_Init+0x4c>)
 80004ac:	f002 f8c6 	bl	800263c <HAL_UART_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004b6:	f000 f883 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200000a0 	.word	0x200000a0
 80004c4:	40004800 	.word	0x40004800

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004dc:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <MX_GPIO_Init+0xec>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a34      	ldr	r2, [pc, #208]	; (80005b4 <MX_GPIO_Init+0xec>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <MX_GPIO_Init+0xec>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0310 	and.w	r3, r3, #16
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f4:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <MX_GPIO_Init+0xec>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a2e      	ldr	r2, [pc, #184]	; (80005b4 <MX_GPIO_Init+0xec>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xec>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <MX_GPIO_Init+0xec>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a28      	ldr	r2, [pc, #160]	; (80005b4 <MX_GPIO_Init+0xec>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xec>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <MX_GPIO_Init+0xec>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xec>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <MX_GPIO_Init+0xec>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0308 	and.w	r3, r3, #8
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <MX_GPIO_Init+0xf0>)
 8000544:	f001 fc1f 	bl	8001d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054e:	481b      	ldr	r0, [pc, #108]	; (80005bc <MX_GPIO_Init+0xf4>)
 8000550:	f001 fc19 	bl	8001d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2302      	movs	r3, #2
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <MX_GPIO_Init+0xf0>)
 800056e:	f001 fa99 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <MX_GPIO_Init+0xf4>)
 8000588:	f001 fa8c 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800058c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000596:	2302      	movs	r3, #2
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_GPIO_Init+0xf4>)
 80005a6:	f001 fa7d 	bl	8001aa4 <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40011000 	.word	0x40011000
 80005bc:	40010800 	.word	0x40010800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x4>
	...

080005c8 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    // 1) verify the checksum
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 80005d0:	481d      	ldr	r0, [pc, #116]	; (8000648 <bootloader_handle_getver_cmd+0x80>)
 80005d2:	f7ff fea3 	bl	800031c <printmsg>

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3b04      	subs	r3, #4
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3b04      	subs	r3, #4
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fb5c 	bl	8000cb0 <bootloader_verify_crc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d11a      	bne.n	8000634 <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <bootloader_handle_getver_cmd+0x84>)
 8000600:	f7ff fe8c 	bl	800031c <printmsg>
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fb08 	bl	8000c20 <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8000610:	f000 fba4 	bl	8000d5c <get_bootloader_version>
 8000614:	4603      	mov	r3, r0
 8000616:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4619      	mov	r1, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	461a      	mov	r2, r3
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <bootloader_handle_getver_cmd+0x88>)
 8000622:	f7ff fe7b 	bl	800031c <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb73 	bl	8000d18 <bootloader_uart_write_data>
        //checksum is wrong send nack
        bootloader_send_nack();
    }


}
 8000632:	e004      	b.n	800063e <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <bootloader_handle_getver_cmd+0x8c>)
 8000636:	f7ff fe71 	bl	800031c <printmsg>
        bootloader_send_nack();
 800063a:	f000 fb19 	bl	8000c70 <bootloader_send_nack>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	08003574 	.word	0x08003574
 800064c:	080035a0 	.word	0x080035a0
 8000650:	080035c4 	.word	0x080035c4
 8000654:	080035e4 	.word	0x080035e4

08000658 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000660:	4816      	ldr	r0, [pc, #88]	; (80006bc <bootloader_handle_gethelp_cmd+0x64>)
 8000662:	f7ff fe5b 	bl	800031c <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <bootloader_handle_gethelp_cmd+0x68>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3b04      	subs	r3, #4
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <bootloader_handle_gethelp_cmd+0x68>)
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3b04      	subs	r3, #4
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	4619      	mov	r1, r3
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <bootloader_handle_gethelp_cmd+0x68>)
 8000684:	f000 fb14 	bl	8000cb0 <bootloader_verify_crc>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10d      	bne.n	80006aa <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <bootloader_handle_gethelp_cmd+0x6c>)
 8000690:	f7ff fe44 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2108      	movs	r1, #8
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fac0 	bl	8000c20 <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 80006a0:	2108      	movs	r1, #8
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <bootloader_handle_gethelp_cmd+0x70>)
 80006a4:	f000 fb38 	bl	8000d18 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80006a8:	e004      	b.n	80006b4 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <bootloader_handle_gethelp_cmd+0x74>)
 80006ac:	f7ff fe36 	bl	800031c <printmsg>
        bootloader_send_nack();
 80006b0:	f000 fade 	bl	8000c70 <bootloader_send_nack>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08003604 	.word	0x08003604
 80006c0:	20000128 	.word	0x20000128
 80006c4:	080035a0 	.word	0x080035a0
 80006c8:	20000000 	.word	0x20000000
 80006cc:	080035e4 	.word	0x080035e4

080006d0 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <bootloader_handle_getcid_cmd+0x84>)
 80006de:	f7ff fe1d 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <bootloader_handle_getcid_cmd+0x88>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3b04      	subs	r3, #4
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <bootloader_handle_getcid_cmd+0x88>)
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3b04      	subs	r3, #4
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <bootloader_handle_getcid_cmd+0x88>)
 8000700:	f000 fad6 	bl	8000cb0 <bootloader_verify_crc>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d11a      	bne.n	8000740 <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <bootloader_handle_getcid_cmd+0x8c>)
 800070c:	f7ff fe06 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fa82 	bl	8000c20 <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 800071c:	f000 fb26 	bl	8000d6c <get_mcu_chip_id>
 8000720:	4603      	mov	r3, r0
 8000722:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	4619      	mov	r1, r3
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	461a      	mov	r2, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <bootloader_handle_getcid_cmd+0x90>)
 800072e:	f7ff fdf5 	bl	800031c <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000732:	f107 030e 	add.w	r3, r7, #14
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f000 faed 	bl	8000d18 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 800073e:	e004      	b.n	800074a <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <bootloader_handle_getcid_cmd+0x94>)
 8000742:	f7ff fdeb 	bl	800031c <printmsg>
        bootloader_send_nack();
 8000746:	f000 fa93 	bl	8000c70 <bootloader_send_nack>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08003630 	.word	0x08003630
 8000758:	20000128 	.word	0x20000128
 800075c:	080035a0 	.word	0x080035a0
 8000760:	0800365c 	.word	0x0800365c
 8000764:	080035e4 	.word	0x080035e4

08000768 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <bootloader_handle_getrdp_cmd+0x84>)
 8000776:	f7ff fdd1 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <bootloader_handle_getrdp_cmd+0x88>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3b04      	subs	r3, #4
 8000786:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <bootloader_handle_getrdp_cmd+0x88>)
 8000788:	4413      	add	r3, r2
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3b04      	subs	r3, #4
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	4619      	mov	r1, r3
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <bootloader_handle_getrdp_cmd+0x88>)
 8000798:	f000 fa8a 	bl	8000cb0 <bootloader_verify_crc>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11a      	bne.n	80007d8 <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <bootloader_handle_getrdp_cmd+0x8c>)
 80007a4:	f7ff fdba 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2101      	movs	r1, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa36 	bl	8000c20 <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 80007b4:	f000 faec 	bl	8000d90 <get_flash_rdp_level>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	4619      	mov	r1, r3
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	461a      	mov	r2, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <bootloader_handle_getrdp_cmd+0x90>)
 80007c6:	f7ff fda9 	bl	800031c <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 80007ca:	f107 030f 	add.w	r3, r7, #15
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 faa1 	bl	8000d18 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 80007d6:	e004      	b.n	80007e2 <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <bootloader_handle_getrdp_cmd+0x94>)
 80007da:	f7ff fd9f 	bl	800031c <printmsg>
        bootloader_send_nack();
 80007de:	f000 fa47 	bl	8000c70 <bootloader_send_nack>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08003680 	.word	0x08003680
 80007f0:	20000128 	.word	0x20000128
 80007f4:	080035a0 	.word	0x080035a0
 80007f8:	080036ac 	.word	0x080036ac
 80007fc:	080035e4 	.word	0x080035e4

08000800 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 800080c:	2300      	movs	r3, #0
 800080e:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000810:	2301      	movs	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000814:	4828      	ldr	r0, [pc, #160]	; (80008b8 <bootloader_handle_go_cmd+0xb8>)
 8000816:	f7ff fd81 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <bootloader_handle_go_cmd+0xbc>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	3b04      	subs	r3, #4
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <bootloader_handle_go_cmd+0xbc>)
 8000828:	4413      	add	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	3b04      	subs	r3, #4
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	4619      	mov	r1, r3
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <bootloader_handle_go_cmd+0xbc>)
 8000838:	f000 fa3a 	bl	8000cb0 <bootloader_verify_crc>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d131      	bne.n	80008a6 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000842:	481f      	ldr	r0, [pc, #124]	; (80008c0 <bootloader_handle_go_cmd+0xc0>)
 8000844:	f7ff fd6a 	bl	800031c <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f9e6 	bl	8000c20 <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800085a:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 800085c:	69f9      	ldr	r1, [r7, #28]
 800085e:	4819      	ldr	r0, [pc, #100]	; (80008c4 <bootloader_handle_go_cmd+0xc4>)
 8000860:	f7ff fd5c 	bl	800031c <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000864:	69f8      	ldr	r0, [r7, #28]
 8000866:	f000 faa7 	bl	8000db8 <verify_address>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d110      	bne.n	8000892 <bootloader_handle_go_cmd+0x92>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000870:	f107 030f 	add.w	r3, r7, #15
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fa4e 	bl	8000d18 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	3301      	adds	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <bootloader_handle_go_cmd+0xc8>)
 8000888:	f7ff fd48 	bl	800031c <printmsg>

            lets_jump();
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000890:	e00e      	b.n	80008b0 <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <bootloader_handle_go_cmd+0xcc>)
 8000894:	f7ff fd42 	bl	800031c <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000898:	f107 030e 	add.w	r3, r7, #14
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fa3a 	bl	8000d18 <bootloader_uart_write_data>
}
 80008a4:	e004      	b.n	80008b0 <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <bootloader_handle_go_cmd+0xd0>)
 80008a8:	f7ff fd38 	bl	800031c <printmsg>
        bootloader_send_nack();
 80008ac:	f000 f9e0 	bl	8000c70 <bootloader_send_nack>
}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080036cc 	.word	0x080036cc
 80008bc:	20000128 	.word	0x20000128
 80008c0:	080035a0 	.word	0x080035a0
 80008c4:	080036f4 	.word	0x080036f4
 80008c8:	08003710 	.word	0x08003710
 80008cc:	08003738 	.word	0x08003738
 80008d0:	080035e4 	.word	0x080035e4

080008d4 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 80008e0:	482b      	ldr	r0, [pc, #172]	; (8000990 <bootloader_handle_flash_erase_cmd+0xbc>)
 80008e2:	f7ff fd1b 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <bootloader_handle_flash_erase_cmd+0xc0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <bootloader_handle_flash_erase_cmd+0xc0>)
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3b04      	subs	r3, #4
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4619      	mov	r1, r3
 8000902:	4824      	ldr	r0, [pc, #144]	; (8000994 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000904:	f000 f9d4 	bl	8000cb0 <bootloader_verify_crc>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d137      	bne.n	800097e <bootloader_handle_flash_erase_cmd+0xaa>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800090e:	4822      	ldr	r0, [pc, #136]	; (8000998 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000910:	f7ff fd04 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f980 	bl	8000c20 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3302      	adds	r3, #2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3303      	adds	r3, #3
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	481a      	ldr	r0, [pc, #104]	; (800099c <bootloader_handle_flash_erase_cmd+0xc8>)
 8000932:	f7ff fcf3 	bl	800031c <printmsg>

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	4818      	ldr	r0, [pc, #96]	; (80009a0 <bootloader_handle_flash_erase_cmd+0xcc>)
 800093e:	f001 fa22 	bl	8001d86 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3302      	adds	r3, #2
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3303      	adds	r3, #3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f000 fa53 	bl	8000dfc <execute_flash_erase>
 8000956:	4603      	mov	r3, r0
 8000958:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,0);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000962:	f001 fa10 	bl	8001d86 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4619      	mov	r1, r3
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <bootloader_handle_flash_erase_cmd+0xd0>)
 800096c:	f7ff fcd6 	bl	800031c <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000970:	f107 030f 	add.w	r3, r7, #15
 8000974:	2101      	movs	r1, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f9ce 	bl	8000d18 <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 800097c:	e004      	b.n	8000988 <bootloader_handle_flash_erase_cmd+0xb4>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000980:	f7ff fccc 	bl	800031c <printmsg>
        bootloader_send_nack();
 8000984:	f000 f974 	bl	8000c70 <bootloader_send_nack>
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0800375c 	.word	0x0800375c
 8000994:	20000128 	.word	0x20000128
 8000998:	080035a0 	.word	0x080035a0
 800099c:	0800378c 	.word	0x0800378c
 80009a0:	40011000 	.word	0x40011000
 80009a4:	080037c0 	.word	0x080037c0
 80009a8:	080035e4 	.word	0x080035e4

080009ac <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 80009b4:	2300      	movs	r3, #0
 80009b6:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 80009bc:	2300      	movs	r3, #0
 80009be:	77bb      	strb	r3, [r7, #30]
 80009c0:	2300      	movs	r3, #0
 80009c2:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	799b      	ldrb	r3, [r3, #6]
 80009ce:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80009d6:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 80009d8:	7f7b      	ldrb	r3, [r7, #29]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	77bb      	strb	r3, [r7, #30]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <bootloader_handle_mem_write_cmd+0xf4>)
 80009e4:	f7ff fc9a 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <bootloader_handle_mem_write_cmd+0xf8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3b04      	subs	r3, #4
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <bootloader_handle_mem_write_cmd+0xf8>)
 80009f6:	4413      	add	r3, r2
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3b04      	subs	r3, #4
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4827      	ldr	r0, [pc, #156]	; (8000aa4 <bootloader_handle_mem_write_cmd+0xf8>)
 8000a06:	f000 f953 	bl	8000cb0 <bootloader_verify_crc>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d13d      	bne.n	8000a8c <bootloader_handle_mem_write_cmd+0xe0>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <bootloader_handle_mem_write_cmd+0xfc>)
 8000a12:	f7ff fc83 	bl	800031c <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8ff 	bl	8000c20 <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000a22:	69b9      	ldr	r1, [r7, #24]
 8000a24:	4821      	ldr	r0, [pc, #132]	; (8000aac <bootloader_handle_mem_write_cmd+0x100>)
 8000a26:	f7ff fc79 	bl	800031c <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000a2a:	69b8      	ldr	r0, [r7, #24]
 8000a2c:	f000 f9c4 	bl	8000db8 <verify_address>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11e      	bne.n	8000a74 <bootloader_handle_mem_write_cmd+0xc8>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000a36:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <bootloader_handle_mem_write_cmd+0x104>)
 8000a38:	f7ff fc70 	bl	800031c <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <bootloader_handle_mem_write_cmd+0x108>)
 8000a44:	f001 f99f 	bl	8001d86 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	7f3a      	ldrb	r2, [r7, #28]
 8000a4e:	69b9      	ldr	r1, [r7, #24]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fa19 	bl	8000e88 <execute_mem_write>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <bootloader_handle_mem_write_cmd+0x108>)
 8000a62:	f001 f990 	bl	8001d86 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8000a66:	f107 030f 	add.w	r3, r7, #15
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f953 	bl	8000d18 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000a72:	e010      	b.n	8000a96 <bootloader_handle_mem_write_cmd+0xea>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000a74:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <bootloader_handle_mem_write_cmd+0x10c>)
 8000a76:	f7ff fc51 	bl	800031c <printmsg>
            write_status = ADDR_INVALID;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f947 	bl	8000d18 <bootloader_uart_write_data>
}
 8000a8a:	e004      	b.n	8000a96 <bootloader_handle_mem_write_cmd+0xea>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <bootloader_handle_mem_write_cmd+0x110>)
 8000a8e:	f7ff fc45 	bl	800031c <printmsg>
        bootloader_send_nack();
 8000a92:	f000 f8ed 	bl	8000c70 <bootloader_send_nack>
}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080037e8 	.word	0x080037e8
 8000aa4:	20000128 	.word	0x20000128
 8000aa8:	080035a0 	.word	0x080035a0
 8000aac:	08003818 	.word	0x08003818
 8000ab0:	08003840 	.word	0x08003840
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	08003868 	.word	0x08003868
 8000abc:	080035e4 	.word	0x080035e4

08000ac0 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000acc:	4820      	ldr	r0, [pc, #128]	; (8000b50 <bootloader_handle_en_rw_protect+0x90>)
 8000ace:	f7ff fc25 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <bootloader_handle_en_rw_protect+0x94>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3b04      	subs	r3, #4
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <bootloader_handle_en_rw_protect+0x94>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3b04      	subs	r3, #4
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4819      	ldr	r0, [pc, #100]	; (8000b54 <bootloader_handle_en_rw_protect+0x94>)
 8000af0:	f000 f8de 	bl	8000cb0 <bootloader_verify_crc>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d120      	bne.n	8000b3c <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000afa:	4817      	ldr	r0, [pc, #92]	; (8000b58 <bootloader_handle_en_rw_protect+0x98>)
 8000afc:	f7ff fc0e 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f88a 	bl	8000c20 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3302      	adds	r3, #2
 8000b10:	7818      	ldrb	r0, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3303      	adds	r3, #3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f000 f9ee 	bl	8000efc <configure_flash_sector_rw_protection>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <bootloader_handle_en_rw_protect+0x9c>)
 8000b2a:	f7ff fbf7 	bl	800031c <printmsg>

        bootloader_uart_write_data(&status,1);
 8000b2e:	f107 030f 	add.w	r3, r7, #15
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8ef 	bl	8000d18 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000b3a:	e004      	b.n	8000b46 <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <bootloader_handle_en_rw_protect+0xa0>)
 8000b3e:	f7ff fbed 	bl	800031c <printmsg>
        bootloader_send_nack();
 8000b42:	f000 f895 	bl	8000c70 <bootloader_send_nack>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08003894 	.word	0x08003894
 8000b54:	20000128 	.word	0x20000128
 8000b58:	080035a0 	.word	0x080035a0
 8000b5c:	080037c0 	.word	0x080037c0
 8000b60:	080035e4 	.word	0x080035e4

08000b64 <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <bootloader_handle_dis_rw_protect+0x84>)
 8000b72:	f7ff fbd3 	bl	800031c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <bootloader_handle_dis_rw_protect+0x88>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3b04      	subs	r3, #4
 8000b82:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <bootloader_handle_dis_rw_protect+0x88>)
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3b04      	subs	r3, #4
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <bootloader_handle_dis_rw_protect+0x88>)
 8000b94:	f000 f88c 	bl	8000cb0 <bootloader_verify_crc>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11b      	bne.n	8000bd6 <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <bootloader_handle_dis_rw_protect+0x8c>)
 8000ba0:	f7ff fbbc 	bl	800031c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f838 	bl	8000c20 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f9a1 	bl	8000efc <configure_flash_sector_rw_protection>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <bootloader_handle_dis_rw_protect+0x90>)
 8000bc4:	f7ff fbaa 	bl	800031c <printmsg>

        bootloader_uart_write_data(&status,1);
 8000bc8:	f107 030f 	add.w	r3, r7, #15
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f8a2 	bl	8000d18 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000bd4:	e004      	b.n	8000be0 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <bootloader_handle_dis_rw_protect+0x94>)
 8000bd8:	f7ff fba0 	bl	800031c <printmsg>
        bootloader_send_nack();
 8000bdc:	f000 f848 	bl	8000c70 <bootloader_send_nack>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	080038c8 	.word	0x080038c8
 8000bec:	20000128 	.word	0x20000128
 8000bf0:	080035a0 	.word	0x080035a0
 8000bf4:	080037c0 	.word	0x080037c0
 8000bf8:	080035e4 	.word	0x080035e4

08000bfc <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]


}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <bootloader_handle_read_otp>:

}

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]


}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	460a      	mov	r2, r1
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000c30:	23a5      	movs	r3, #165	; 0xa5
 8000c32:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	737b      	strb	r3, [r7, #13]
	//here
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <bootloader_send_ack+0x48>)
 8000c40:	f001 f8a1 	bl	8001d86 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000c44:	f107 010c 	add.w	r1, r7, #12
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <bootloader_send_ack+0x4c>)
 8000c50:	f001 fd41 	bl	80026d6 <HAL_UART_Transmit>
	//HAL_Delay(100);
	//if(HAL_UART_GetState(C_UART) != HAL_UART_STATE_BUSY_TX_RX){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <bootloader_send_ack+0x48>)
 8000c5c:	f001 f893 	bl	8001d86 <HAL_GPIO_WritePin>

	//}

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	200000a0 	.word	0x200000a0

08000c70 <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000c76:	237f      	movs	r3, #127	; 0x7f
 8000c78:	71fb      	strb	r3, [r7, #7]
	//here
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <bootloader_send_nack+0x38>)
 8000c82:	f001 f880 	bl	8001d86 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000c86:	1df9      	adds	r1, r7, #7
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <bootloader_send_nack+0x3c>)
 8000c90:	f001 fd21 	bl	80026d6 <HAL_UART_Transmit>
	//HAL_Delay(100);
	//if(HAL_UART_GetState(C_UART) != HAL_UART_STATE_BUSY_TX_RX){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <bootloader_send_nack+0x38>)
 8000c9c:	f001 f873 	bl	8001d86 <HAL_GPIO_WritePin>

	//}
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	200000a0 	.word	0x200000a0

08000cb0 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8000cbc:	23ff      	movs	r3, #255	; 0xff
 8000cbe:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	e00f      	b.n	8000ce6 <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <bootloader_verify_crc+0x64>)
 8000cda:	f000 fc8c 	bl	80015f6 <HAL_CRC_Accumulate>
 8000cde:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3eb      	bcc.n	8000cc6 <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <bootloader_verify_crc+0x64>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <bootloader_verify_crc+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d101      	bne.n	8000d0a <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000e0 	.word	0x200000e0

08000d18 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	//here
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <bootloader_uart_write_data+0x3c>)
 8000d2a:	f001 f82c 	bl	8001d86 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <bootloader_uart_write_data+0x40>)
 8000d3a:	f001 fccc 	bl	80026d6 <HAL_UART_Transmit>
	//HAL_Delay(100);
	//if(HAL_UART_GetState(C_UART) != HAL_UART_STATE_BUSY_TX_RX){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <bootloader_uart_write_data+0x3c>)
 8000d46:	f001 f81e 	bl	8001d86 <HAL_GPIO_WritePin>
	//}

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010800 	.word	0x40010800
 8000d58:	200000a0 	.word	0x200000a0

08000d5c <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8000d60:	2310      	movs	r3, #16
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <get_mcu_chip_id+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000d7e:	88fb      	ldrh	r3, [r7, #6]

}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e0042000 	.word	0xe0042000

08000d90 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <get_flash_rdp_level+0x24>)
 8000d9c:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 8000da6:	79fb      	ldrb	r3, [r7, #7]

}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	1fffc000 	.word	0x1fffc000

08000db8 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM_BASE && go_address <= SRAM_END)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dc6:	d305      	bcc.n	8000dd4 <verify_address+0x1c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <verify_address+0x3c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d801      	bhi.n	8000dd4 <verify_address+0x1c>
	{
		return ADDR_VALID;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e00a      	b.n	8000dea <verify_address+0x32>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000dda:	d305      	bcc.n	8000de8 <verify_address+0x30>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <verify_address+0x40>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d801      	bhi.n	8000de8 <verify_address+0x30>
	{
		return ADDR_VALID;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e000      	b.n	8000dea <verify_address+0x32>
	}
	else
		return ADDR_INVALID;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20005000 	.word	0x20005000
 8000df8:	08020000 	.word	0x08020000

08000dfc <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 128 )
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b80      	cmp	r3, #128	; 0x80
 8000e10:	d901      	bls.n	8000e16 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000e12:	2304      	movs	r3, #4
 8000e14:	e031      	b.n	8000e7a <execute_flash_erase+0x7e>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d002      	beq.n	8000e22 <execute_flash_erase+0x26>
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d82a      	bhi.n	8000e78 <execute_flash_erase+0x7c>
	{
		if(sector_number == (uint8_t) 0xff)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2bff      	cmp	r3, #255	; 0xff
 8000e26:	d102      	bne.n	8000e2e <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e012      	b.n	8000e54 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased*/
			uint8_t remanining_sector = 128 - sector_number;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000e34:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000e38:	3380      	adds	r3, #128	; 0x80
 8000e3a:	77fb      	strb	r3, [r7, #31]
            if( number_of_sector > remanining_sector)
 8000e3c:	79ba      	ldrb	r2, [r7, #6]
 8000e3e:	7ffb      	ldrb	r3, [r7, #31]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d901      	bls.n	8000e48 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
			flashErase_handle.PageAddress = FLASH_SECTOR2_BASE_ADDRESS; // this is the initial sector
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <execute_flash_erase+0x88>)
 8000e4e:	617b      	str	r3, [r7, #20]
			flashErase_handle.NbPages = number_of_sector;
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	61bb      	str	r3, [r7, #24]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000e58:	f000 fc68 	bl	800172c <HAL_FLASH_Unlock>
		//flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fd74 	bl	8001954 <HAL_FLASHEx_Erase>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	77bb      	strb	r3, [r7, #30]
		HAL_FLASH_Lock();
 8000e70:	f000 fc82 	bl	8001778 <HAL_FLASH_Lock>

		return status;
 8000e74:	7fbb      	ldrb	r3, [r7, #30]
 8000e76:	e000      	b.n	8000e7a <execute_flash_erase+0x7e>
	}


	return INVALID_SECTOR;
 8000e78:	2304      	movs	r3, #4
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08004000 	.word	0x08004000

08000e88 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	77fb      	strb	r3, [r7, #31]
    uint16_t temp = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	82fb      	strh	r3, [r7, #22]
    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8000e9c:	f000 fc46 	bl	800172c <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <(len) ; i+=2)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	e01e      	b.n	8000ee4 <execute_mem_write+0x5c>
    {
    	temp = (pBuffer[i+1]<<8)|(pBuffer[i]);
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	68f9      	ldr	r1, [r7, #12]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	440b      	add	r3, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	82fb      	strh	r3, [r7, #22]
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mem_address+i,temp);
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	18d1      	adds	r1, r2, r3
 8000eca:	8afb      	ldrh	r3, [r7, #22]
 8000ecc:	f04f 0400 	mov.w	r4, #0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fbb9 	bl	800164c <HAL_FLASH_Program>
 8000eda:	4603      	mov	r3, r0
 8000edc:	77fb      	strb	r3, [r7, #31]
    for(uint32_t i = 0 ; i <(len) ; i+=2)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3dc      	bcc.n	8000ea6 <execute_mem_write+0x1e>
    }

    HAL_FLASH_Lock();
 8000eec:	f000 fc44 	bl	8001778 <HAL_FLASH_Lock>

    return status;
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}
	...

08000efc <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <configure_flash_sector_rw_protection+0x124>)
 8000f10:	60fb      	str	r3, [r7, #12]

	  if(disable)
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d025      	beq.n	8000f64 <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000f18:	f000 fc3e 	bl	8001798 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f1c:	bf00      	nop
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f043 0202 	orr.w	r2, r3, #2
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f4e:	bf00      	nop
 8000f50:	4b34      	ldr	r3, [pc, #208]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f9      	bne.n	8000f50 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8000f5c:	f000 fc38 	bl	80017d0 <HAL_FLASH_OB_Lock>

			return 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e058      	b.n	8001016 <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d126      	bne.n	8000fb8 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000f6a:	f000 fc15 	bl	8001798 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f6e:	bf00      	nop
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f9      	bne.n	8000f70 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	43d2      	mvns	r2, r2
 8000f92:	401a      	ands	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f043 0202 	orr.w	r2, r3, #2
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000fa4:	bf00      	nop
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 8000fb2:	f000 fc0d 	bl	80017d0 <HAL_FLASH_OB_Lock>
 8000fb6:	e02d      	b.n	8001014 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d12a      	bne.n	8001014 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000fbe:	f000 fbeb 	bl	8001798 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000fc2:	bf00      	nop
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f9      	bne.n	8000fc4 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	0412      	lsls	r2, r2, #16
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001002:	bf00      	nop
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <configure_flash_sector_rw_protection+0x128>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f9      	bne.n	8001004 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8001010:	f000 fbde 	bl	80017d0 <HAL_FLASH_OB_Lock>
    }

		return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c14 	.word	0x40023c14
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_MspInit+0x5c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_MspInit+0x5c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x5c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x5c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x60>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_MspInit+0x60>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000

0800108c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_CRC_MspInit+0x34>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10b      	bne.n	80010b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_CRC_MspInit+0x38>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_CRC_MspInit+0x38>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_CRC_MspInit+0x38>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40023000 	.word	0x40023000
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <HAL_UART_MspInit+0xf8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d130      	bne.n	800114a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 80010ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4619      	mov	r1, r3
 800112a:	4827      	ldr	r0, [pc, #156]	; (80011c8 <HAL_UART_MspInit+0x100>)
 800112c:	f000 fcba 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001130:	2308      	movs	r3, #8
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4619      	mov	r1, r3
 8001142:	4821      	ldr	r0, [pc, #132]	; (80011c8 <HAL_UART_MspInit+0x100>)
 8001144:	f000 fcae 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001148:	e036      	b.n	80011b8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_UART_MspInit+0x104>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d131      	bne.n	80011b8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 800115a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115e:	61d3      	str	r3, [r2, #28]
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_UART_MspInit+0xfc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	4619      	mov	r1, r3
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <HAL_UART_MspInit+0x108>)
 800119a:	f000 fc83 	bl	8001aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800119e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HAL_UART_MspInit+0x108>)
 80011b4:	f000 fc76 	bl	8001aa4 <HAL_GPIO_Init>
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40004800 	.word	0x40004800
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80011d8:	f001 f9f8 	bl	80025cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <HardFault_Handler+0x4>

080011e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <BusFault_Handler+0x4>

080011f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8ce 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x16>
		heap_end = &end;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <_sbrk+0x50>)
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <_sbrk+0x54>)
 800123c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <_sbrk+0x50>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_sbrk+0x50>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	466a      	mov	r2, sp
 800124e:	4293      	cmp	r3, r2
 8001250:	d907      	bls.n	8001262 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001252:	f001 fca3 	bl	8002b9c <__errno>
 8001256:	4602      	mov	r2, r0
 8001258:	230c      	movs	r3, #12
 800125a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	e006      	b.n	8001270 <_sbrk+0x48>
	}

	heap_end += incr;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_sbrk+0x50>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a03      	ldr	r2, [pc, #12]	; (8001278 <_sbrk+0x50>)
 800126c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000094 	.word	0x20000094
 800127c:	20000220 	.word	0x20000220

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <SystemInit+0x5c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <SystemInit+0x5c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <SystemInit+0x5c>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4911      	ldr	r1, [pc, #68]	; (80012dc <SystemInit+0x5c>)
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <SystemInit+0x60>)
 8001298:	4013      	ands	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <SystemInit+0x5c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <SystemInit+0x5c>)
 80012a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <SystemInit+0x5c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SystemInit+0x5c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SystemInit+0x5c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <SystemInit+0x5c>)
 80012be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SystemInit+0x5c>)
 80012c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SystemInit+0x64>)
 80012ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	f8ff0000 	.word	0xf8ff0000
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012ea:	e003      	b.n	80012f4 <LoopCopyDataInit>

080012ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012f2:	3104      	adds	r1, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012fc:	d3f6      	bcc.n	80012ec <CopyDataInit>
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001300:	e002      	b.n	8001308 <LoopFillZerobss>

08001302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001304:	f842 3b04 	str.w	r3, [r2], #4

08001308 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800130a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800130c:	d3f9      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130e:	f7ff ffb7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f001 fc49 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001316:	f7fe ff21 	bl	800015c <main>
  bx lr
 800131a:	4770      	bx	lr
  ldr r3, =_sidata
 800131c:	080039c0 	.word	0x080039c0
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001324:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001328:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800132c:	2000021c 	.word	0x2000021c

08001330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_2_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x28>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x28>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f907 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fe6a 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f911 	bl	80015a6 <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f8e7 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000010 	.word	0x20000010
 80013bc:	2000000c 	.word	0x2000000c

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_IncTick+0x20>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000010 	.word	0x20000010
 80013e0:	200001f0 	.word	0x200001f0

080013e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	200001f0 	.word	0x200001f0

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff90 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff49 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff5e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff90 	bl	80014b0 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5f 	bl	800145c <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffb0 	bl	8001514 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00e      	b.n	80015ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	795b      	ldrb	r3, [r3, #5]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fd53 	bl	800108c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	441a      	add	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3f0      	bcc.n	8001612 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800163e:	693b      	ldr	r3, [r7, #16]
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_FLASH_Program+0xd8>)
 8001668:	7e1b      	ldrb	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_FLASH_Program+0x26>
 800166e:	2302      	movs	r3, #2
 8001670:	e054      	b.n	800171c <HAL_FLASH_Program+0xd0>
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <HAL_FLASH_Program+0xd8>)
 8001674:	2201      	movs	r2, #1
 8001676:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800167c:	f000 f8d4 	bl	8001828 <FLASH_WaitForLastOperation>
 8001680:	4603      	mov	r3, r0
 8001682:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d144      	bne.n	8001714 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d102      	bne.n	8001696 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001690:	2301      	movs	r3, #1
 8001692:	757b      	strb	r3, [r7, #21]
 8001694:	e007      	b.n	80016a6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d102      	bne.n	80016a2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800169c:	2302      	movs	r3, #2
 800169e:	757b      	strb	r3, [r7, #21]
 80016a0:	e001      	b.n	80016a6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80016a2:	2304      	movs	r3, #4
 80016a4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	75bb      	strb	r3, [r7, #22]
 80016aa:	e02d      	b.n	8001708 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	005a      	lsls	r2, r3, #1
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	eb02 0c03 	add.w	ip, r2, r3
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	0119      	lsls	r1, r3, #4
 80016ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016be:	f1c1 0620 	rsb	r6, r1, #32
 80016c2:	f1a1 0020 	sub.w	r0, r1, #32
 80016c6:	fa22 f401 	lsr.w	r4, r2, r1
 80016ca:	fa03 f606 	lsl.w	r6, r3, r6
 80016ce:	4334      	orrs	r4, r6
 80016d0:	fa23 f000 	lsr.w	r0, r3, r0
 80016d4:	4304      	orrs	r4, r0
 80016d6:	fa23 f501 	lsr.w	r5, r3, r1
 80016da:	b2a3      	uxth	r3, r4
 80016dc:	4619      	mov	r1, r3
 80016de:	4660      	mov	r0, ip
 80016e0:	f000 f886 	bl	80017f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016e8:	f000 f89e 	bl	8001828 <FLASH_WaitForLastOperation>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_FLASH_Program+0xdc>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_FLASH_Program+0xdc>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001702:	7dbb      	ldrb	r3, [r7, #22]
 8001704:	3301      	adds	r3, #1
 8001706:	75bb      	strb	r3, [r7, #22]
 8001708:	7dba      	ldrb	r2, [r7, #22]
 800170a:	7d7b      	ldrb	r3, [r7, #21]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3cd      	bcc.n	80016ac <HAL_FLASH_Program+0x60>
 8001710:	e000      	b.n	8001714 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001712:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_FLASH_Program+0xd8>)
 8001716:	2200      	movs	r2, #0
 8001718:	761a      	strb	r2, [r3, #24]

  return status;
 800171a:	7dfb      	ldrb	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001724:	200001f8 	.word	0x200001f8
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_FLASH_Unlock+0x40>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00d      	beq.n	800175e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_FLASH_Unlock+0x40>)
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_FLASH_Unlock+0x44>)
 8001746:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_FLASH_Unlock+0x40>)
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_FLASH_Unlock+0x48>)
 800174c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_FLASH_Unlock+0x40>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800175e:	79fb      	ldrb	r3, [r7, #7]
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	45670123 	.word	0x45670123
 8001774:	cdef89ab 	.word	0xcdef89ab

08001778 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_FLASH_Lock+0x1c>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_FLASH_Lock+0x1c>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_FLASH_OB_Unlock+0x2c>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_FLASH_OB_Unlock+0x30>)
 80017ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_FLASH_OB_Unlock+0x34>)
 80017b2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000
 80017c8:	45670123 	.word	0x45670123
 80017cc:	cdef89ab 	.word	0xcdef89ab

080017d0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_FLASH_OB_Lock+0x1c>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_FLASH_OB_Lock+0x1c>)
 80017da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <FLASH_Program_HalfWord+0x30>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <FLASH_Program_HalfWord+0x34>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <FLASH_Program_HalfWord+0x34>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	801a      	strh	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200001f8 	.word	0x200001f8
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fdd8 	bl	80013e4 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001836:	e010      	b.n	800185a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183e:	d00c      	beq.n	800185a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <FLASH_WaitForLastOperation+0x2e>
 8001846:	f7ff fdcd 	bl	80013e4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d201      	bcs.n	800185a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e025      	b.n	80018a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e8      	bne.n	8001838 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001874:	2220      	movs	r2, #32
 8001876:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800189c:	f000 f80a 	bl	80018b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <FLASH_SetErrorCode+0x98>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 80018d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <FLASH_SetErrorCode+0x98>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 80018f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <FLASH_SetErrorCode+0x98>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <FLASH_SetErrorCode+0x9c>)
 8001914:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <FLASH_SetErrorCode+0x98>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <FLASH_SetErrorCode+0x98>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f240 1201 	movw	r2, #257	; 0x101
 8001928:	4293      	cmp	r3, r2
 800192a:	d106      	bne.n	800193a <FLASH_SetErrorCode+0x86>
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <FLASH_SetErrorCode+0x98>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <FLASH_SetErrorCode+0x98>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	61d3      	str	r3, [r2, #28]
}  
 8001938:	e002      	b.n	8001940 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <FLASH_SetErrorCode+0x98>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60d3      	str	r3, [r2, #12]
}  
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000
 8001950:	200001f8 	.word	0x200001f8

08001954 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001968:	7e1b      	ldrb	r3, [r3, #24]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_FLASHEx_Erase+0x1e>
 800196e:	2302      	movs	r3, #2
 8001970:	e053      	b.n	8001a1a <HAL_FLASHEx_Erase+0xc6>
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001974:	2201      	movs	r2, #1
 8001976:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001984:	f7ff ff50 	bl	8001828 <FLASH_WaitForLastOperation>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d141      	bne.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 f84c 	bl	8001a2c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001998:	f7ff ff46 	bl	8001828 <FLASH_WaitForLastOperation>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6113      	str	r3, [r2, #16]
 80019ac:	e031      	b.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019b2:	f7ff ff39 	bl	8001828 <FLASH_WaitForLastOperation>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d12a      	bne.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e019      	b.n	8001a00 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f000 f849 	bl	8001a64 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d6:	f7ff ff27 	bl	8001828 <FLASH_WaitForLastOperation>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	601a      	str	r2, [r3, #0]
            break;
 80019f6:	e00c      	b.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	029a      	lsls	r2, r3, #10
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3dc      	bcc.n	80019cc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	761a      	strb	r2, [r3, #24]

  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001f8 	.word	0x200001f8
 8001a28:	40022000 	.word	0x40022000

08001a2c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <FLASH_MassErase+0x30>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <FLASH_MassErase+0x34>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <FLASH_MassErase+0x34>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <FLASH_MassErase+0x34>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <FLASH_MassErase+0x34>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	200001f8 	.word	0x200001f8
 8001a60:	40022000 	.word	0x40022000

08001a64 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <FLASH_PageErase+0x38>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <FLASH_PageErase+0x3c>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <FLASH_PageErase+0x3c>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <FLASH_PageErase+0x3c>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <FLASH_PageErase+0x3c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <FLASH_PageErase+0x3c>)
 8001a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200001f8 	.word	0x200001f8
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b08b      	sub	sp, #44	; 0x2c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e127      	b.n	8001d08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8116 	bne.w	8001d02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d034      	beq.n	8001b48 <HAL_GPIO_Init+0xa4>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d80d      	bhi.n	8001afe <HAL_GPIO_Init+0x5a>
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d02b      	beq.n	8001b3e <HAL_GPIO_Init+0x9a>
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d804      	bhi.n	8001af4 <HAL_GPIO_Init+0x50>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d01c      	beq.n	8001b2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af2:	e048      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d043      	beq.n	8001b80 <HAL_GPIO_Init+0xdc>
 8001af8:	2b11      	cmp	r3, #17
 8001afa:	d01b      	beq.n	8001b34 <HAL_GPIO_Init+0x90>
          break;
 8001afc:	e043      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001afe:	4a89      	ldr	r2, [pc, #548]	; (8001d24 <HAL_GPIO_Init+0x280>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d026      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
 8001b04:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <HAL_GPIO_Init+0x280>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d806      	bhi.n	8001b18 <HAL_GPIO_Init+0x74>
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <HAL_GPIO_Init+0x284>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d020      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
 8001b10:	4a86      	ldr	r2, [pc, #536]	; (8001d2c <HAL_GPIO_Init+0x288>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01d      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
          break;
 8001b16:	e036      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b18:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <HAL_GPIO_Init+0x28c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
 8001b1e:	4a85      	ldr	r2, [pc, #532]	; (8001d34 <HAL_GPIO_Init+0x290>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d016      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
 8001b24:	4a84      	ldr	r2, [pc, #528]	; (8001d38 <HAL_GPIO_Init+0x294>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0xae>
          break;
 8001b2a:	e02c      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e028      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e023      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	3308      	adds	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e01e      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e019      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e012      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	611a      	str	r2, [r3, #16]
          break;
 8001b72:	e008      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	615a      	str	r2, [r3, #20]
          break;
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	d801      	bhi.n	8001b90 <HAL_GPIO_Init+0xec>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	e001      	b.n	8001b94 <HAL_GPIO_Init+0xf0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d802      	bhi.n	8001ba2 <HAL_GPIO_Init+0xfe>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x104>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	210f      	movs	r1, #15
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	6a39      	ldr	r1, [r7, #32]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8096 	beq.w	8001d02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_GPIO_Init+0x298>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_GPIO_Init+0x298>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_GPIO_Init+0x298>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bee:	4a54      	ldr	r2, [pc, #336]	; (8001d40 <HAL_GPIO_Init+0x29c>)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_GPIO_Init+0x2a0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x19e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <HAL_GPIO_Init+0x2a4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x19a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_GPIO_Init+0x2a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x196>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <HAL_GPIO_Init+0x2ac>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x192>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x1a0>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x1a0>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x1a0>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x1a0>
 8001c42:	2300      	movs	r3, #0
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c54:	493a      	ldr	r1, [pc, #232]	; (8001d40 <HAL_GPIO_Init+0x29c>)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4938      	ldr	r1, [pc, #224]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4933      	ldr	r1, [pc, #204]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	492e      	ldr	r1, [pc, #184]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4929      	ldr	r1, [pc, #164]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	4924      	ldr	r1, [pc, #144]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	491f      	ldr	r1, [pc, #124]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	491a      	ldr	r1, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60cb      	str	r3, [r1, #12]
 8001cf2:	e006      	b.n	8001d02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4915      	ldr	r1, [pc, #84]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f aed0 	bne.w	8001ab8 <HAL_GPIO_Init+0x14>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	372c      	adds	r7, #44	; 0x2c
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	10210000 	.word	0x10210000
 8001d28:	10110000 	.word	0x10110000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10310000 	.word	0x10310000
 8001d34:	10320000 	.word	0x10320000
 8001d38:	10220000 	.word	0x10220000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40011400 	.word	0x40011400
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d96:	787b      	ldrb	r3, [r7, #1]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da2:	e003      	b.n	8001dac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	041a      	lsls	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e26c      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd8:	4b92      	ldr	r3, [pc, #584]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de4:	4b8f      	ldr	r3, [pc, #572]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
 8001df0:	4b8c      	ldr	r3, [pc, #560]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d10b      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d06c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d168      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e246      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76>
 8001e20:	4b80      	ldr	r3, [pc, #512]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7f      	ldr	r2, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	e02e      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b78      	ldr	r3, [pc, #480]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a77      	ldr	r2, [pc, #476]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0xbc>
 8001e5a:	4b72      	ldr	r3, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a71      	ldr	r2, [pc, #452]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e74:	4b6b      	ldr	r3, [pc, #428]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a67      	ldr	r2, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff faa6 	bl	80013e4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff faa2 	bl	80013e4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1fa      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe4>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa92 	bl	80013e4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fa8e 	bl	80013e4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1e6      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x10c>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efe:	4b49      	ldr	r3, [pc, #292]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
 8001f0a:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1ba      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4939      	ldr	r1, [pc, #228]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fa47 	bl	80013e4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fa43 	bl	80013e4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e19b      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa26 	bl	80013e4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fa22 	bl	80013e4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e17a      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03a      	beq.n	800203c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d019      	beq.n	8002002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fa06 	bl	80013e4 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fa02 	bl	80013e4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e15a      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 fafa 	bl	80025f4 <RCC_Delay>
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7ff f9ec 	bl	80013e4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff f9e8 	bl	80013e4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d908      	bls.n	8002030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e140      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	42420000 	.word	0x42420000
 800202c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b9e      	ldr	r3, [pc, #632]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e9      	bne.n	8002010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a6 	beq.w	8002196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b97      	ldr	r3, [pc, #604]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b94      	ldr	r3, [pc, #592]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a93      	ldr	r2, [pc, #588]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <HAL_RCC_OscConfig+0x4f8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a8a      	ldr	r2, [pc, #552]	; (80022b0 <HAL_RCC_OscConfig+0x4f8>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff f9a9 	bl	80013e4 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff f9a5 	bl	80013e4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0fd      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x4f8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x312>
 80020bc:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x334>
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a72      	ldr	r2, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x356>
 80020f4:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a6c      	ldr	r2, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b64      	ldr	r3, [pc, #400]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a63      	ldr	r2, [pc, #396]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff f959 	bl	80013e4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff f955 	bl	80013e4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0ab      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x37e>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff f943 	bl	80013e4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f93f 	bl	80013e4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e095      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b48      	ldr	r3, [pc, #288]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a47      	ldr	r2, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8081 	beq.w	80022a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b42      	ldr	r3, [pc, #264]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d061      	beq.n	8002270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d146      	bne.n	8002242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_OscConfig+0x4fc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff f913 	bl	80013e4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff f90f 	bl	80013e4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e067      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	492d      	ldr	r1, [pc, #180]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a19      	ldr	r1, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	430b      	orrs	r3, r1
 800220e:	4927      	ldr	r1, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_OscConfig+0x4fc>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff f8e3 	bl	80013e4 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f8df 	bl	80013e4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e037      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x46a>
 8002240:	e02f      	b.n	80022a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_RCC_OscConfig+0x4fc>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f8cc 	bl	80013e4 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f8c8 	bl	80013e4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e020      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x498>
 800226e:	e018      	b.n	80022a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e013      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	429a      	cmp	r2, r3
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
 80022b4:	42420060 	.word	0x42420060

080022b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d0      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d910      	bls.n	80022fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4965      	ldr	r1, [pc, #404]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b8      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a52      	ldr	r2, [pc, #328]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	494d      	ldr	r1, [pc, #308]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d040      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d115      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07f      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e073      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06b      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4936      	ldr	r1, [pc, #216]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7ff f81c 	bl	80013e4 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7ff f818 	bl	80013e4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e053      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d210      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e032      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4916      	ldr	r1, [pc, #88]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002446:	f000 f82d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800244a:	4601      	mov	r1, r0
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	fa21 f303 	lsr.w	r3, r1, r3
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1cc>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1d0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe ff7a 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40022000 	.word	0x40022000
 800247c:	40021000 	.word	0x40021000
 8002480:	0800396c 	.word	0x0800396c
 8002484:	20000008 	.word	0x20000008
 8002488:	2000000c 	.word	0x2000000c

0800248c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_EnableCSS+0x14>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	4242004c 	.word	0x4242004c

080024a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b490      	push	{r4, r7}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024ac:	1d3c      	adds	r4, r7, #4
 80024ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x40>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x46>
 80024e2:	e02d      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e6:	623b      	str	r3, [r7, #32]
      break;
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f6:	4413      	add	r3, r2
 80024f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0c5b      	lsrs	r3, r3, #17
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002516:	4413      	add	r3, r2
 8002518:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800251c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002522:	fb02 f203 	mul.w	r2, r2, r3
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	e004      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	623b      	str	r3, [r7, #32]
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002542:	623b      	str	r3, [r7, #32]
      break;
 8002544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002546:	6a3b      	ldr	r3, [r7, #32]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc90      	pop	{r4, r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	08003958 	.word	0x08003958
 8002558:	08003968 	.word	0x08003968
 800255c:	40021000 	.word	0x40021000
 8002560:	007a1200 	.word	0x007a1200
 8002564:	003d0900 	.word	0x003d0900

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <HAL_RCC_GetHCLKFreq+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000008 	.word	0x20000008

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff2 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002584:	4601      	mov	r1, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	0800397c 	.word	0x0800397c

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffde 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025ac:	4601      	mov	r1, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	0800397c 	.word	0x0800397c

080025cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_NMI_IRQHandler+0x20>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b80      	cmp	r3, #128	; 0x80
 80025da:	d104      	bne.n	80025e6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80025dc:	f000 f828 	bl	8002630 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	701a      	strb	r2, [r3, #0]
  }
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	4002100a 	.word	0x4002100a

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000008 	.word	0x20000008
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e03f      	b.n	80026ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fd30 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f9b1 	bl	80029e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b088      	sub	sp, #32
 80026da:	af02      	add	r7, sp, #8
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	f040 8083 	bne.w	80027fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_UART_Transmit+0x2e>
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e07b      	b.n	8002800 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_UART_Transmit+0x40>
 8002712:	2302      	movs	r3, #2
 8002714:	e074      	b.n	8002800 <HAL_UART_Transmit+0x12a>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2221      	movs	r2, #33	; 0x21
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800272c:	f7fe fe5a 	bl	80013e4 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800273e:	e042      	b.n	80027c6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	d122      	bne.n	800279e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8f6 	bl	8002954 <UART_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e046      	b.n	8002800 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3302      	adds	r3, #2
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	e017      	b.n	80027c6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3301      	adds	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	e013      	b.n	80027c6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f8d3 	bl	8002954 <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e023      	b.n	8002800 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1b7      	bne.n	8002740 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2140      	movs	r1, #64	; 0x40
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f8ba 	bl	8002954 <UART_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00a      	b.n	8002800 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b20      	cmp	r3, #32
 8002826:	f040 8090 	bne.w	800294a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_Receive+0x2e>
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e088      	b.n	800294c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_UART_Receive+0x40>
 8002844:	2302      	movs	r3, #2
 8002846:	e081      	b.n	800294c <HAL_UART_Receive+0x144>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2222      	movs	r2, #34	; 0x22
 800285a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800285e:	f7fe fdc1 	bl	80013e4 <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002870:	e05c      	b.n	800292c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d12b      	bne.n	80028e2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2120      	movs	r1, #32
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f85d 	bl	8002954 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e053      	b.n	800294c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10c      	bne.n	80028ca <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028bc:	b29a      	uxth	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3302      	adds	r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e030      	b.n	800292c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	e024      	b.n	800292c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2120      	movs	r1, #32
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f831 	bl	8002954 <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e027      	b.n	800294c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	60ba      	str	r2, [r7, #8]
 8002910:	b2ca      	uxtb	r2, r1
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e00a      	b.n	800292c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19d      	bne.n	8002872 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	e02c      	b.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d028      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <UART_WaitOnFlagUntilTimeout+0x30>
 8002974:	f7fe fd36 	bl	80013e4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	429a      	cmp	r2, r3
 8002982:	d21d      	bcs.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002992:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e00f      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d0c3      	beq.n	8002966 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a22:	f023 030c 	bic.w	r3, r3, #12
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <UART_SetConfig+0x1ac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d14e      	bne.n	8002aee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a50:	f7ff fda8 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8002a54:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009a      	lsls	r2, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	0119      	lsls	r1, r3, #4
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a8c:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	fb00 f303 	mul.w	r3, r0, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	3332      	adds	r3, #50	; 0x32
 8002aa0:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aac:	4419      	add	r1, r3
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	440a      	add	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002aec:	e04d      	b.n	8002b8a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aee:	f7ff fd45 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8002af2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	0119      	lsls	r1, r3, #4
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002b2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2064      	movs	r0, #100	; 0x64
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4a:	4419      	add	r1, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002b64:	fba3 0302 	umull	r0, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2064      	movs	r0, #100	; 0x64
 8002b6c:	fb00 f303 	mul.w	r3, r0, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	3332      	adds	r3, #50	; 0x32
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <UART_SetConfig+0x1b0>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	440a      	add	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40013800 	.word	0x40013800
 8002b98:	51eb851f 	.word	0x51eb851f

08002b9c <__errno>:
 8002b9c:	4b01      	ldr	r3, [pc, #4]	; (8002ba4 <__errno+0x8>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000014 	.word	0x20000014

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2500      	movs	r5, #0
 8002bac:	4e0c      	ldr	r6, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1ba4      	subs	r4, r4, r6
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a5      	cmp	r5, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f000 fc34 	bl	8003424 <_init>
 8002bbc:	2500      	movs	r5, #0
 8002bbe:	4e0a      	ldr	r6, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1ba4      	subs	r4, r4, r6
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a5      	cmp	r5, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bd0:	4798      	blx	r3
 8002bd2:	3501      	adds	r5, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bda:	4798      	blx	r3
 8002bdc:	3501      	adds	r5, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	080039b8 	.word	0x080039b8
 8002be4:	080039b8 	.word	0x080039b8
 8002be8:	080039b8 	.word	0x080039b8
 8002bec:	080039bc 	.word	0x080039bc

08002bf0 <memset>:
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <_vsiprintf_r>:
 8002c00:	b500      	push	{lr}
 8002c02:	b09b      	sub	sp, #108	; 0x6c
 8002c04:	9100      	str	r1, [sp, #0]
 8002c06:	9104      	str	r1, [sp, #16]
 8002c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c0c:	9105      	str	r1, [sp, #20]
 8002c0e:	9102      	str	r1, [sp, #8]
 8002c10:	4905      	ldr	r1, [pc, #20]	; (8002c28 <_vsiprintf_r+0x28>)
 8002c12:	9103      	str	r1, [sp, #12]
 8002c14:	4669      	mov	r1, sp
 8002c16:	f000 f86d 	bl	8002cf4 <_svfiprintf_r>
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	9b00      	ldr	r3, [sp, #0]
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	b01b      	add	sp, #108	; 0x6c
 8002c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c26:	bf00      	nop
 8002c28:	ffff0208 	.word	0xffff0208

08002c2c <vsiprintf>:
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	460a      	mov	r2, r1
 8002c30:	4601      	mov	r1, r0
 8002c32:	4802      	ldr	r0, [pc, #8]	; (8002c3c <vsiprintf+0x10>)
 8002c34:	6800      	ldr	r0, [r0, #0]
 8002c36:	f7ff bfe3 	b.w	8002c00 <_vsiprintf_r>
 8002c3a:	bf00      	nop
 8002c3c:	20000014 	.word	0x20000014

08002c40 <__ssputs_r>:
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	688e      	ldr	r6, [r1, #8]
 8002c46:	4682      	mov	sl, r0
 8002c48:	429e      	cmp	r6, r3
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4690      	mov	r8, r2
 8002c4e:	4699      	mov	r9, r3
 8002c50:	d837      	bhi.n	8002cc2 <__ssputs_r+0x82>
 8002c52:	898a      	ldrh	r2, [r1, #12]
 8002c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c58:	d031      	beq.n	8002cbe <__ssputs_r+0x7e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	6825      	ldr	r5, [r4, #0]
 8002c5e:	6909      	ldr	r1, [r1, #16]
 8002c60:	1a6f      	subs	r7, r5, r1
 8002c62:	6965      	ldr	r5, [r4, #20]
 8002c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c68:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c6c:	f109 0301 	add.w	r3, r9, #1
 8002c70:	443b      	add	r3, r7
 8002c72:	429d      	cmp	r5, r3
 8002c74:	bf38      	it	cc
 8002c76:	461d      	movcc	r5, r3
 8002c78:	0553      	lsls	r3, r2, #21
 8002c7a:	d530      	bpl.n	8002cde <__ssputs_r+0x9e>
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f000 fb37 	bl	80032f0 <_malloc_r>
 8002c82:	4606      	mov	r6, r0
 8002c84:	b950      	cbnz	r0, 8002c9c <__ssputs_r+0x5c>
 8002c86:	230c      	movs	r3, #12
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f8ca 3000 	str.w	r3, [sl]
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9c:	463a      	mov	r2, r7
 8002c9e:	6921      	ldr	r1, [r4, #16]
 8002ca0:	f000 fab6 	bl	8003210 <memcpy>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	6126      	str	r6, [r4, #16]
 8002cb2:	443e      	add	r6, r7
 8002cb4:	6026      	str	r6, [r4, #0]
 8002cb6:	464e      	mov	r6, r9
 8002cb8:	6165      	str	r5, [r4, #20]
 8002cba:	1bed      	subs	r5, r5, r7
 8002cbc:	60a5      	str	r5, [r4, #8]
 8002cbe:	454e      	cmp	r6, r9
 8002cc0:	d900      	bls.n	8002cc4 <__ssputs_r+0x84>
 8002cc2:	464e      	mov	r6, r9
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	f000 faac 	bl	8003226 <memmove>
 8002cce:	68a3      	ldr	r3, [r4, #8]
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	1b9b      	subs	r3, r3, r6
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	441e      	add	r6, r3
 8002cda:	6026      	str	r6, [r4, #0]
 8002cdc:	e7dc      	b.n	8002c98 <__ssputs_r+0x58>
 8002cde:	462a      	mov	r2, r5
 8002ce0:	f000 fb60 	bl	80033a4 <_realloc_r>
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	2800      	cmp	r0, #0
 8002ce8:	d1e2      	bne.n	8002cb0 <__ssputs_r+0x70>
 8002cea:	6921      	ldr	r1, [r4, #16]
 8002cec:	4650      	mov	r0, sl
 8002cee:	f000 fab3 	bl	8003258 <_free_r>
 8002cf2:	e7c8      	b.n	8002c86 <__ssputs_r+0x46>

08002cf4 <_svfiprintf_r>:
 8002cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	898b      	ldrh	r3, [r1, #12]
 8002cfc:	b09d      	sub	sp, #116	; 0x74
 8002cfe:	061f      	lsls	r7, r3, #24
 8002d00:	4680      	mov	r8, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	4616      	mov	r6, r2
 8002d06:	d50f      	bpl.n	8002d28 <_svfiprintf_r+0x34>
 8002d08:	690b      	ldr	r3, [r1, #16]
 8002d0a:	b96b      	cbnz	r3, 8002d28 <_svfiprintf_r+0x34>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	f000 faef 	bl	80032f0 <_malloc_r>
 8002d12:	6020      	str	r0, [r4, #0]
 8002d14:	6120      	str	r0, [r4, #16]
 8002d16:	b928      	cbnz	r0, 8002d24 <_svfiprintf_r+0x30>
 8002d18:	230c      	movs	r3, #12
 8002d1a:	f8c8 3000 	str.w	r3, [r8]
 8002d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d22:	e0c8      	b.n	8002eb6 <_svfiprintf_r+0x1c2>
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	6163      	str	r3, [r4, #20]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d32:	2330      	movs	r3, #48	; 0x30
 8002d34:	f04f 0b01 	mov.w	fp, #1
 8002d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d3c:	9503      	str	r5, [sp, #12]
 8002d3e:	4637      	mov	r7, r6
 8002d40:	463d      	mov	r5, r7
 8002d42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d46:	b10b      	cbz	r3, 8002d4c <_svfiprintf_r+0x58>
 8002d48:	2b25      	cmp	r3, #37	; 0x25
 8002d4a:	d13e      	bne.n	8002dca <_svfiprintf_r+0xd6>
 8002d4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d50:	d00b      	beq.n	8002d6a <_svfiprintf_r+0x76>
 8002d52:	4653      	mov	r3, sl
 8002d54:	4632      	mov	r2, r6
 8002d56:	4621      	mov	r1, r4
 8002d58:	4640      	mov	r0, r8
 8002d5a:	f7ff ff71 	bl	8002c40 <__ssputs_r>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f000 80a4 	beq.w	8002eac <_svfiprintf_r+0x1b8>
 8002d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d66:	4453      	add	r3, sl
 8002d68:	9309      	str	r3, [sp, #36]	; 0x24
 8002d6a:	783b      	ldrb	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 809d 	beq.w	8002eac <_svfiprintf_r+0x1b8>
 8002d72:	2300      	movs	r3, #0
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	9307      	str	r3, [sp, #28]
 8002d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d84:	931a      	str	r3, [sp, #104]	; 0x68
 8002d86:	462f      	mov	r7, r5
 8002d88:	2205      	movs	r2, #5
 8002d8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d8e:	4850      	ldr	r0, [pc, #320]	; (8002ed0 <_svfiprintf_r+0x1dc>)
 8002d90:	f000 fa30 	bl	80031f4 <memchr>
 8002d94:	9b04      	ldr	r3, [sp, #16]
 8002d96:	b9d0      	cbnz	r0, 8002dce <_svfiprintf_r+0xda>
 8002d98:	06d9      	lsls	r1, r3, #27
 8002d9a:	bf44      	itt	mi
 8002d9c:	2220      	movmi	r2, #32
 8002d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002da2:	071a      	lsls	r2, r3, #28
 8002da4:	bf44      	itt	mi
 8002da6:	222b      	movmi	r2, #43	; 0x2b
 8002da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dac:	782a      	ldrb	r2, [r5, #0]
 8002dae:	2a2a      	cmp	r2, #42	; 0x2a
 8002db0:	d015      	beq.n	8002dde <_svfiprintf_r+0xea>
 8002db2:	462f      	mov	r7, r5
 8002db4:	2000      	movs	r0, #0
 8002db6:	250a      	movs	r5, #10
 8002db8:	9a07      	ldr	r2, [sp, #28]
 8002dba:	4639      	mov	r1, r7
 8002dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dc0:	3b30      	subs	r3, #48	; 0x30
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d94d      	bls.n	8002e62 <_svfiprintf_r+0x16e>
 8002dc6:	b1b8      	cbz	r0, 8002df8 <_svfiprintf_r+0x104>
 8002dc8:	e00f      	b.n	8002dea <_svfiprintf_r+0xf6>
 8002dca:	462f      	mov	r7, r5
 8002dcc:	e7b8      	b.n	8002d40 <_svfiprintf_r+0x4c>
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <_svfiprintf_r+0x1dc>)
 8002dd0:	463d      	mov	r5, r7
 8002dd2:	1a80      	subs	r0, r0, r2
 8002dd4:	fa0b f000 	lsl.w	r0, fp, r0
 8002dd8:	4318      	orrs	r0, r3
 8002dda:	9004      	str	r0, [sp, #16]
 8002ddc:	e7d3      	b.n	8002d86 <_svfiprintf_r+0x92>
 8002dde:	9a03      	ldr	r2, [sp, #12]
 8002de0:	1d11      	adds	r1, r2, #4
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	9103      	str	r1, [sp, #12]
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	db01      	blt.n	8002dee <_svfiprintf_r+0xfa>
 8002dea:	9207      	str	r2, [sp, #28]
 8002dec:	e004      	b.n	8002df8 <_svfiprintf_r+0x104>
 8002dee:	4252      	negs	r2, r2
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	9207      	str	r2, [sp, #28]
 8002df6:	9304      	str	r3, [sp, #16]
 8002df8:	783b      	ldrb	r3, [r7, #0]
 8002dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8002dfc:	d10c      	bne.n	8002e18 <_svfiprintf_r+0x124>
 8002dfe:	787b      	ldrb	r3, [r7, #1]
 8002e00:	2b2a      	cmp	r3, #42	; 0x2a
 8002e02:	d133      	bne.n	8002e6c <_svfiprintf_r+0x178>
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	3702      	adds	r7, #2
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	9203      	str	r2, [sp, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bfb8      	it	lt
 8002e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e16:	9305      	str	r3, [sp, #20]
 8002e18:	4d2e      	ldr	r5, [pc, #184]	; (8002ed4 <_svfiprintf_r+0x1e0>)
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	7839      	ldrb	r1, [r7, #0]
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f000 f9e8 	bl	80031f4 <memchr>
 8002e24:	b138      	cbz	r0, 8002e36 <_svfiprintf_r+0x142>
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	1b40      	subs	r0, r0, r5
 8002e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e2e:	9b04      	ldr	r3, [sp, #16]
 8002e30:	3701      	adds	r7, #1
 8002e32:	4303      	orrs	r3, r0
 8002e34:	9304      	str	r3, [sp, #16]
 8002e36:	7839      	ldrb	r1, [r7, #0]
 8002e38:	2206      	movs	r2, #6
 8002e3a:	4827      	ldr	r0, [pc, #156]	; (8002ed8 <_svfiprintf_r+0x1e4>)
 8002e3c:	1c7e      	adds	r6, r7, #1
 8002e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e42:	f000 f9d7 	bl	80031f4 <memchr>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d038      	beq.n	8002ebc <_svfiprintf_r+0x1c8>
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <_svfiprintf_r+0x1e8>)
 8002e4c:	bb13      	cbnz	r3, 8002e94 <_svfiprintf_r+0x1a0>
 8002e4e:	9b03      	ldr	r3, [sp, #12]
 8002e50:	3307      	adds	r3, #7
 8002e52:	f023 0307 	bic.w	r3, r3, #7
 8002e56:	3308      	adds	r3, #8
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e5c:	444b      	add	r3, r9
 8002e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e60:	e76d      	b.n	8002d3e <_svfiprintf_r+0x4a>
 8002e62:	fb05 3202 	mla	r2, r5, r2, r3
 8002e66:	2001      	movs	r0, #1
 8002e68:	460f      	mov	r7, r1
 8002e6a:	e7a6      	b.n	8002dba <_svfiprintf_r+0xc6>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	250a      	movs	r5, #10
 8002e70:	4619      	mov	r1, r3
 8002e72:	3701      	adds	r7, #1
 8002e74:	9305      	str	r3, [sp, #20]
 8002e76:	4638      	mov	r0, r7
 8002e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e7c:	3a30      	subs	r2, #48	; 0x30
 8002e7e:	2a09      	cmp	r2, #9
 8002e80:	d903      	bls.n	8002e8a <_svfiprintf_r+0x196>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0c8      	beq.n	8002e18 <_svfiprintf_r+0x124>
 8002e86:	9105      	str	r1, [sp, #20]
 8002e88:	e7c6      	b.n	8002e18 <_svfiprintf_r+0x124>
 8002e8a:	fb05 2101 	mla	r1, r5, r1, r2
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4607      	mov	r7, r0
 8002e92:	e7f0      	b.n	8002e76 <_svfiprintf_r+0x182>
 8002e94:	ab03      	add	r3, sp, #12
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <_svfiprintf_r+0x1ec>)
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	f3af 8000 	nop.w
 8002ea4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ea8:	4681      	mov	r9, r0
 8002eaa:	d1d6      	bne.n	8002e5a <_svfiprintf_r+0x166>
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	065b      	lsls	r3, r3, #25
 8002eb0:	f53f af35 	bmi.w	8002d1e <_svfiprintf_r+0x2a>
 8002eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eb6:	b01d      	add	sp, #116	; 0x74
 8002eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebc:	ab03      	add	r3, sp, #12
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <_svfiprintf_r+0x1ec>)
 8002ec4:	a904      	add	r1, sp, #16
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f000 f882 	bl	8002fd0 <_printf_i>
 8002ecc:	e7ea      	b.n	8002ea4 <_svfiprintf_r+0x1b0>
 8002ece:	bf00      	nop
 8002ed0:	08003984 	.word	0x08003984
 8002ed4:	0800398a 	.word	0x0800398a
 8002ed8:	0800398e 	.word	0x0800398e
 8002edc:	00000000 	.word	0x00000000
 8002ee0:	08002c41 	.word	0x08002c41

08002ee4 <_printf_common>:
 8002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee8:	4691      	mov	r9, r2
 8002eea:	461f      	mov	r7, r3
 8002eec:	688a      	ldr	r2, [r1, #8]
 8002eee:	690b      	ldr	r3, [r1, #16]
 8002ef0:	4606      	mov	r6, r0
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	bfb8      	it	lt
 8002ef6:	4613      	movlt	r3, r2
 8002ef8:	f8c9 3000 	str.w	r3, [r9]
 8002efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f00:	460c      	mov	r4, r1
 8002f02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f06:	b112      	cbz	r2, 8002f0e <_printf_common+0x2a>
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f8c9 3000 	str.w	r3, [r9]
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	0699      	lsls	r1, r3, #26
 8002f12:	bf42      	ittt	mi
 8002f14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f18:	3302      	addmi	r3, #2
 8002f1a:	f8c9 3000 	strmi.w	r3, [r9]
 8002f1e:	6825      	ldr	r5, [r4, #0]
 8002f20:	f015 0506 	ands.w	r5, r5, #6
 8002f24:	d107      	bne.n	8002f36 <_printf_common+0x52>
 8002f26:	f104 0a19 	add.w	sl, r4, #25
 8002f2a:	68e3      	ldr	r3, [r4, #12]
 8002f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	42ab      	cmp	r3, r5
 8002f34:	dc29      	bgt.n	8002f8a <_printf_common+0xa6>
 8002f36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	3300      	adds	r3, #0
 8002f3e:	bf18      	it	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	0692      	lsls	r2, r2, #26
 8002f44:	d42e      	bmi.n	8002fa4 <_printf_common+0xc0>
 8002f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	47c0      	blx	r8
 8002f50:	3001      	adds	r0, #1
 8002f52:	d021      	beq.n	8002f98 <_printf_common+0xb4>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	68e5      	ldr	r5, [r4, #12]
 8002f58:	f003 0306 	and.w	r3, r3, #6
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	bf18      	it	ne
 8002f60:	2500      	movne	r5, #0
 8002f62:	f8d9 2000 	ldr.w	r2, [r9]
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	bf08      	it	eq
 8002f6c:	1aad      	subeq	r5, r5, r2
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	6922      	ldr	r2, [r4, #16]
 8002f72:	bf08      	it	eq
 8002f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bfc4      	itt	gt
 8002f7c:	1a9b      	subgt	r3, r3, r2
 8002f7e:	18ed      	addgt	r5, r5, r3
 8002f80:	341a      	adds	r4, #26
 8002f82:	454d      	cmp	r5, r9
 8002f84:	d11a      	bne.n	8002fbc <_printf_common+0xd8>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e008      	b.n	8002f9c <_printf_common+0xb8>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4652      	mov	r2, sl
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d103      	bne.n	8002fa0 <_printf_common+0xbc>
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa0:	3501      	adds	r5, #1
 8002fa2:	e7c2      	b.n	8002f2a <_printf_common+0x46>
 8002fa4:	2030      	movs	r0, #48	; 0x30
 8002fa6:	18e1      	adds	r1, r4, r3
 8002fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fb2:	4422      	add	r2, r4
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fba:	e7c4      	b.n	8002f46 <_printf_common+0x62>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	4639      	mov	r1, r7
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	47c0      	blx	r8
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d0e6      	beq.n	8002f98 <_printf_common+0xb4>
 8002fca:	f109 0901 	add.w	r9, r9, #1
 8002fce:	e7d8      	b.n	8002f82 <_printf_common+0x9e>

08002fd0 <_printf_i>:
 8002fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fd8:	460c      	mov	r4, r1
 8002fda:	7e09      	ldrb	r1, [r1, #24]
 8002fdc:	b085      	sub	sp, #20
 8002fde:	296e      	cmp	r1, #110	; 0x6e
 8002fe0:	4617      	mov	r7, r2
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	4698      	mov	r8, r3
 8002fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fe8:	f000 80b3 	beq.w	8003152 <_printf_i+0x182>
 8002fec:	d822      	bhi.n	8003034 <_printf_i+0x64>
 8002fee:	2963      	cmp	r1, #99	; 0x63
 8002ff0:	d036      	beq.n	8003060 <_printf_i+0x90>
 8002ff2:	d80a      	bhi.n	800300a <_printf_i+0x3a>
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	f000 80b9 	beq.w	800316c <_printf_i+0x19c>
 8002ffa:	2958      	cmp	r1, #88	; 0x58
 8002ffc:	f000 8083 	beq.w	8003106 <_printf_i+0x136>
 8003000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003004:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003008:	e032      	b.n	8003070 <_printf_i+0xa0>
 800300a:	2964      	cmp	r1, #100	; 0x64
 800300c:	d001      	beq.n	8003012 <_printf_i+0x42>
 800300e:	2969      	cmp	r1, #105	; 0x69
 8003010:	d1f6      	bne.n	8003000 <_printf_i+0x30>
 8003012:	6820      	ldr	r0, [r4, #0]
 8003014:	6813      	ldr	r3, [r2, #0]
 8003016:	0605      	lsls	r5, r0, #24
 8003018:	f103 0104 	add.w	r1, r3, #4
 800301c:	d52a      	bpl.n	8003074 <_printf_i+0xa4>
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6011      	str	r1, [r2, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da03      	bge.n	800302e <_printf_i+0x5e>
 8003026:	222d      	movs	r2, #45	; 0x2d
 8003028:	425b      	negs	r3, r3
 800302a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800302e:	486f      	ldr	r0, [pc, #444]	; (80031ec <_printf_i+0x21c>)
 8003030:	220a      	movs	r2, #10
 8003032:	e039      	b.n	80030a8 <_printf_i+0xd8>
 8003034:	2973      	cmp	r1, #115	; 0x73
 8003036:	f000 809d 	beq.w	8003174 <_printf_i+0x1a4>
 800303a:	d808      	bhi.n	800304e <_printf_i+0x7e>
 800303c:	296f      	cmp	r1, #111	; 0x6f
 800303e:	d020      	beq.n	8003082 <_printf_i+0xb2>
 8003040:	2970      	cmp	r1, #112	; 0x70
 8003042:	d1dd      	bne.n	8003000 <_printf_i+0x30>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	e003      	b.n	8003056 <_printf_i+0x86>
 800304e:	2975      	cmp	r1, #117	; 0x75
 8003050:	d017      	beq.n	8003082 <_printf_i+0xb2>
 8003052:	2978      	cmp	r1, #120	; 0x78
 8003054:	d1d4      	bne.n	8003000 <_printf_i+0x30>
 8003056:	2378      	movs	r3, #120	; 0x78
 8003058:	4865      	ldr	r0, [pc, #404]	; (80031f0 <_printf_i+0x220>)
 800305a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800305e:	e055      	b.n	800310c <_printf_i+0x13c>
 8003060:	6813      	ldr	r3, [r2, #0]
 8003062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003066:	1d19      	adds	r1, r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6011      	str	r1, [r2, #0]
 800306c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003070:	2301      	movs	r3, #1
 8003072:	e08c      	b.n	800318e <_printf_i+0x1be>
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800307a:	6011      	str	r1, [r2, #0]
 800307c:	bf18      	it	ne
 800307e:	b21b      	sxthne	r3, r3
 8003080:	e7cf      	b.n	8003022 <_printf_i+0x52>
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	6825      	ldr	r5, [r4, #0]
 8003086:	1d18      	adds	r0, r3, #4
 8003088:	6010      	str	r0, [r2, #0]
 800308a:	0628      	lsls	r0, r5, #24
 800308c:	d501      	bpl.n	8003092 <_printf_i+0xc2>
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	e002      	b.n	8003098 <_printf_i+0xc8>
 8003092:	0668      	lsls	r0, r5, #25
 8003094:	d5fb      	bpl.n	800308e <_printf_i+0xbe>
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	296f      	cmp	r1, #111	; 0x6f
 800309a:	bf14      	ite	ne
 800309c:	220a      	movne	r2, #10
 800309e:	2208      	moveq	r2, #8
 80030a0:	4852      	ldr	r0, [pc, #328]	; (80031ec <_printf_i+0x21c>)
 80030a2:	2100      	movs	r1, #0
 80030a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030a8:	6865      	ldr	r5, [r4, #4]
 80030aa:	2d00      	cmp	r5, #0
 80030ac:	60a5      	str	r5, [r4, #8]
 80030ae:	f2c0 8095 	blt.w	80031dc <_printf_i+0x20c>
 80030b2:	6821      	ldr	r1, [r4, #0]
 80030b4:	f021 0104 	bic.w	r1, r1, #4
 80030b8:	6021      	str	r1, [r4, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13d      	bne.n	800313a <_printf_i+0x16a>
 80030be:	2d00      	cmp	r5, #0
 80030c0:	f040 808e 	bne.w	80031e0 <_printf_i+0x210>
 80030c4:	4665      	mov	r5, ip
 80030c6:	2a08      	cmp	r2, #8
 80030c8:	d10b      	bne.n	80030e2 <_printf_i+0x112>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	07db      	lsls	r3, r3, #31
 80030ce:	d508      	bpl.n	80030e2 <_printf_i+0x112>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	bfde      	ittt	le
 80030d8:	2330      	movle	r3, #48	; 0x30
 80030da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030e2:	ebac 0305 	sub.w	r3, ip, r5
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	f8cd 8000 	str.w	r8, [sp]
 80030ec:	463b      	mov	r3, r7
 80030ee:	aa03      	add	r2, sp, #12
 80030f0:	4621      	mov	r1, r4
 80030f2:	4630      	mov	r0, r6
 80030f4:	f7ff fef6 	bl	8002ee4 <_printf_common>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d14d      	bne.n	8003198 <_printf_i+0x1c8>
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	b005      	add	sp, #20
 8003102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003106:	4839      	ldr	r0, [pc, #228]	; (80031ec <_printf_i+0x21c>)
 8003108:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	6821      	ldr	r1, [r4, #0]
 8003110:	1d1d      	adds	r5, r3, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6015      	str	r5, [r2, #0]
 8003116:	060a      	lsls	r2, r1, #24
 8003118:	d50b      	bpl.n	8003132 <_printf_i+0x162>
 800311a:	07ca      	lsls	r2, r1, #31
 800311c:	bf44      	itt	mi
 800311e:	f041 0120 	orrmi.w	r1, r1, #32
 8003122:	6021      	strmi	r1, [r4, #0]
 8003124:	b91b      	cbnz	r3, 800312e <_printf_i+0x15e>
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	f022 0220 	bic.w	r2, r2, #32
 800312c:	6022      	str	r2, [r4, #0]
 800312e:	2210      	movs	r2, #16
 8003130:	e7b7      	b.n	80030a2 <_printf_i+0xd2>
 8003132:	064d      	lsls	r5, r1, #25
 8003134:	bf48      	it	mi
 8003136:	b29b      	uxthmi	r3, r3
 8003138:	e7ef      	b.n	800311a <_printf_i+0x14a>
 800313a:	4665      	mov	r5, ip
 800313c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003140:	fb02 3311 	mls	r3, r2, r1, r3
 8003144:	5cc3      	ldrb	r3, [r0, r3]
 8003146:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800314a:	460b      	mov	r3, r1
 800314c:	2900      	cmp	r1, #0
 800314e:	d1f5      	bne.n	800313c <_printf_i+0x16c>
 8003150:	e7b9      	b.n	80030c6 <_printf_i+0xf6>
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	6825      	ldr	r5, [r4, #0]
 8003156:	1d18      	adds	r0, r3, #4
 8003158:	6961      	ldr	r1, [r4, #20]
 800315a:	6010      	str	r0, [r2, #0]
 800315c:	0628      	lsls	r0, r5, #24
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	d501      	bpl.n	8003166 <_printf_i+0x196>
 8003162:	6019      	str	r1, [r3, #0]
 8003164:	e002      	b.n	800316c <_printf_i+0x19c>
 8003166:	066a      	lsls	r2, r5, #25
 8003168:	d5fb      	bpl.n	8003162 <_printf_i+0x192>
 800316a:	8019      	strh	r1, [r3, #0]
 800316c:	2300      	movs	r3, #0
 800316e:	4665      	mov	r5, ip
 8003170:	6123      	str	r3, [r4, #16]
 8003172:	e7b9      	b.n	80030e8 <_printf_i+0x118>
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	1d19      	adds	r1, r3, #4
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	681d      	ldr	r5, [r3, #0]
 800317c:	6862      	ldr	r2, [r4, #4]
 800317e:	2100      	movs	r1, #0
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f837 	bl	80031f4 <memchr>
 8003186:	b108      	cbz	r0, 800318c <_printf_i+0x1bc>
 8003188:	1b40      	subs	r0, r0, r5
 800318a:	6060      	str	r0, [r4, #4]
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	6123      	str	r3, [r4, #16]
 8003190:	2300      	movs	r3, #0
 8003192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003196:	e7a7      	b.n	80030e8 <_printf_i+0x118>
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	462a      	mov	r2, r5
 800319c:	4639      	mov	r1, r7
 800319e:	4630      	mov	r0, r6
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d0aa      	beq.n	80030fc <_printf_i+0x12c>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	079b      	lsls	r3, r3, #30
 80031aa:	d413      	bmi.n	80031d4 <_printf_i+0x204>
 80031ac:	68e0      	ldr	r0, [r4, #12]
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	4298      	cmp	r0, r3
 80031b2:	bfb8      	it	lt
 80031b4:	4618      	movlt	r0, r3
 80031b6:	e7a3      	b.n	8003100 <_printf_i+0x130>
 80031b8:	2301      	movs	r3, #1
 80031ba:	464a      	mov	r2, r9
 80031bc:	4639      	mov	r1, r7
 80031be:	4630      	mov	r0, r6
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d09a      	beq.n	80030fc <_printf_i+0x12c>
 80031c6:	3501      	adds	r5, #1
 80031c8:	68e3      	ldr	r3, [r4, #12]
 80031ca:	9a03      	ldr	r2, [sp, #12]
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	42ab      	cmp	r3, r5
 80031d0:	dcf2      	bgt.n	80031b8 <_printf_i+0x1e8>
 80031d2:	e7eb      	b.n	80031ac <_printf_i+0x1dc>
 80031d4:	2500      	movs	r5, #0
 80031d6:	f104 0919 	add.w	r9, r4, #25
 80031da:	e7f5      	b.n	80031c8 <_printf_i+0x1f8>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ac      	bne.n	800313a <_printf_i+0x16a>
 80031e0:	7803      	ldrb	r3, [r0, #0]
 80031e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ea:	e76c      	b.n	80030c6 <_printf_i+0xf6>
 80031ec:	08003995 	.word	0x08003995
 80031f0:	080039a6 	.word	0x080039a6

080031f4 <memchr>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	b2c9      	uxtb	r1, r1
 80031f8:	4402      	add	r2, r0
 80031fa:	4290      	cmp	r0, r2
 80031fc:	4603      	mov	r3, r0
 80031fe:	d101      	bne.n	8003204 <memchr+0x10>
 8003200:	2300      	movs	r3, #0
 8003202:	e003      	b.n	800320c <memchr+0x18>
 8003204:	781c      	ldrb	r4, [r3, #0]
 8003206:	3001      	adds	r0, #1
 8003208:	428c      	cmp	r4, r1
 800320a:	d1f6      	bne.n	80031fa <memchr+0x6>
 800320c:	4618      	mov	r0, r3
 800320e:	bd10      	pop	{r4, pc}

08003210 <memcpy>:
 8003210:	b510      	push	{r4, lr}
 8003212:	1e43      	subs	r3, r0, #1
 8003214:	440a      	add	r2, r1
 8003216:	4291      	cmp	r1, r2
 8003218:	d100      	bne.n	800321c <memcpy+0xc>
 800321a:	bd10      	pop	{r4, pc}
 800321c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003224:	e7f7      	b.n	8003216 <memcpy+0x6>

08003226 <memmove>:
 8003226:	4288      	cmp	r0, r1
 8003228:	b510      	push	{r4, lr}
 800322a:	eb01 0302 	add.w	r3, r1, r2
 800322e:	d807      	bhi.n	8003240 <memmove+0x1a>
 8003230:	1e42      	subs	r2, r0, #1
 8003232:	4299      	cmp	r1, r3
 8003234:	d00a      	beq.n	800324c <memmove+0x26>
 8003236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800323a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800323e:	e7f8      	b.n	8003232 <memmove+0xc>
 8003240:	4283      	cmp	r3, r0
 8003242:	d9f5      	bls.n	8003230 <memmove+0xa>
 8003244:	1881      	adds	r1, r0, r2
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	42d3      	cmn	r3, r2
 800324a:	d100      	bne.n	800324e <memmove+0x28>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003252:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003256:	e7f7      	b.n	8003248 <memmove+0x22>

08003258 <_free_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4605      	mov	r5, r0
 800325c:	2900      	cmp	r1, #0
 800325e:	d043      	beq.n	80032e8 <_free_r+0x90>
 8003260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003264:	1f0c      	subs	r4, r1, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfb8      	it	lt
 800326a:	18e4      	addlt	r4, r4, r3
 800326c:	f000 f8d0 	bl	8003410 <__malloc_lock>
 8003270:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <_free_r+0x94>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	4610      	mov	r0, r2
 8003276:	b933      	cbnz	r3, 8003286 <_free_r+0x2e>
 8003278:	6063      	str	r3, [r4, #4]
 800327a:	6014      	str	r4, [r2, #0]
 800327c:	4628      	mov	r0, r5
 800327e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003282:	f000 b8c6 	b.w	8003412 <__malloc_unlock>
 8003286:	42a3      	cmp	r3, r4
 8003288:	d90b      	bls.n	80032a2 <_free_r+0x4a>
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	1862      	adds	r2, r4, r1
 800328e:	4293      	cmp	r3, r2
 8003290:	bf01      	itttt	eq
 8003292:	681a      	ldreq	r2, [r3, #0]
 8003294:	685b      	ldreq	r3, [r3, #4]
 8003296:	1852      	addeq	r2, r2, r1
 8003298:	6022      	streq	r2, [r4, #0]
 800329a:	6063      	str	r3, [r4, #4]
 800329c:	6004      	str	r4, [r0, #0]
 800329e:	e7ed      	b.n	800327c <_free_r+0x24>
 80032a0:	4613      	mov	r3, r2
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	b10a      	cbz	r2, 80032aa <_free_r+0x52>
 80032a6:	42a2      	cmp	r2, r4
 80032a8:	d9fa      	bls.n	80032a0 <_free_r+0x48>
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	1858      	adds	r0, r3, r1
 80032ae:	42a0      	cmp	r0, r4
 80032b0:	d10b      	bne.n	80032ca <_free_r+0x72>
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	4401      	add	r1, r0
 80032b6:	1858      	adds	r0, r3, r1
 80032b8:	4282      	cmp	r2, r0
 80032ba:	6019      	str	r1, [r3, #0]
 80032bc:	d1de      	bne.n	800327c <_free_r+0x24>
 80032be:	6810      	ldr	r0, [r2, #0]
 80032c0:	6852      	ldr	r2, [r2, #4]
 80032c2:	4401      	add	r1, r0
 80032c4:	6019      	str	r1, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	e7d8      	b.n	800327c <_free_r+0x24>
 80032ca:	d902      	bls.n	80032d2 <_free_r+0x7a>
 80032cc:	230c      	movs	r3, #12
 80032ce:	602b      	str	r3, [r5, #0]
 80032d0:	e7d4      	b.n	800327c <_free_r+0x24>
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	1821      	adds	r1, r4, r0
 80032d6:	428a      	cmp	r2, r1
 80032d8:	bf01      	itttt	eq
 80032da:	6811      	ldreq	r1, [r2, #0]
 80032dc:	6852      	ldreq	r2, [r2, #4]
 80032de:	1809      	addeq	r1, r1, r0
 80032e0:	6021      	streq	r1, [r4, #0]
 80032e2:	6062      	str	r2, [r4, #4]
 80032e4:	605c      	str	r4, [r3, #4]
 80032e6:	e7c9      	b.n	800327c <_free_r+0x24>
 80032e8:	bd38      	pop	{r3, r4, r5, pc}
 80032ea:	bf00      	nop
 80032ec:	20000098 	.word	0x20000098

080032f0 <_malloc_r>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	1ccd      	adds	r5, r1, #3
 80032f4:	f025 0503 	bic.w	r5, r5, #3
 80032f8:	3508      	adds	r5, #8
 80032fa:	2d0c      	cmp	r5, #12
 80032fc:	bf38      	it	cc
 80032fe:	250c      	movcc	r5, #12
 8003300:	2d00      	cmp	r5, #0
 8003302:	4606      	mov	r6, r0
 8003304:	db01      	blt.n	800330a <_malloc_r+0x1a>
 8003306:	42a9      	cmp	r1, r5
 8003308:	d903      	bls.n	8003312 <_malloc_r+0x22>
 800330a:	230c      	movs	r3, #12
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	2000      	movs	r0, #0
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	f000 f87d 	bl	8003410 <__malloc_lock>
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <_malloc_r+0xac>)
 8003318:	6814      	ldr	r4, [r2, #0]
 800331a:	4621      	mov	r1, r4
 800331c:	b991      	cbnz	r1, 8003344 <_malloc_r+0x54>
 800331e:	4c20      	ldr	r4, [pc, #128]	; (80033a0 <_malloc_r+0xb0>)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	b91b      	cbnz	r3, 800332c <_malloc_r+0x3c>
 8003324:	4630      	mov	r0, r6
 8003326:	f000 f863 	bl	80033f0 <_sbrk_r>
 800332a:	6020      	str	r0, [r4, #0]
 800332c:	4629      	mov	r1, r5
 800332e:	4630      	mov	r0, r6
 8003330:	f000 f85e 	bl	80033f0 <_sbrk_r>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d124      	bne.n	8003382 <_malloc_r+0x92>
 8003338:	230c      	movs	r3, #12
 800333a:	4630      	mov	r0, r6
 800333c:	6033      	str	r3, [r6, #0]
 800333e:	f000 f868 	bl	8003412 <__malloc_unlock>
 8003342:	e7e4      	b.n	800330e <_malloc_r+0x1e>
 8003344:	680b      	ldr	r3, [r1, #0]
 8003346:	1b5b      	subs	r3, r3, r5
 8003348:	d418      	bmi.n	800337c <_malloc_r+0x8c>
 800334a:	2b0b      	cmp	r3, #11
 800334c:	d90f      	bls.n	800336e <_malloc_r+0x7e>
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	18cc      	adds	r4, r1, r3
 8003352:	50cd      	str	r5, [r1, r3]
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f85c 	bl	8003412 <__malloc_unlock>
 800335a:	f104 000b 	add.w	r0, r4, #11
 800335e:	1d23      	adds	r3, r4, #4
 8003360:	f020 0007 	bic.w	r0, r0, #7
 8003364:	1ac3      	subs	r3, r0, r3
 8003366:	d0d3      	beq.n	8003310 <_malloc_r+0x20>
 8003368:	425a      	negs	r2, r3
 800336a:	50e2      	str	r2, [r4, r3]
 800336c:	e7d0      	b.n	8003310 <_malloc_r+0x20>
 800336e:	684b      	ldr	r3, [r1, #4]
 8003370:	428c      	cmp	r4, r1
 8003372:	bf16      	itet	ne
 8003374:	6063      	strne	r3, [r4, #4]
 8003376:	6013      	streq	r3, [r2, #0]
 8003378:	460c      	movne	r4, r1
 800337a:	e7eb      	b.n	8003354 <_malloc_r+0x64>
 800337c:	460c      	mov	r4, r1
 800337e:	6849      	ldr	r1, [r1, #4]
 8003380:	e7cc      	b.n	800331c <_malloc_r+0x2c>
 8003382:	1cc4      	adds	r4, r0, #3
 8003384:	f024 0403 	bic.w	r4, r4, #3
 8003388:	42a0      	cmp	r0, r4
 800338a:	d005      	beq.n	8003398 <_malloc_r+0xa8>
 800338c:	1a21      	subs	r1, r4, r0
 800338e:	4630      	mov	r0, r6
 8003390:	f000 f82e 	bl	80033f0 <_sbrk_r>
 8003394:	3001      	adds	r0, #1
 8003396:	d0cf      	beq.n	8003338 <_malloc_r+0x48>
 8003398:	6025      	str	r5, [r4, #0]
 800339a:	e7db      	b.n	8003354 <_malloc_r+0x64>
 800339c:	20000098 	.word	0x20000098
 80033a0:	2000009c 	.word	0x2000009c

080033a4 <_realloc_r>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	4607      	mov	r7, r0
 80033a8:	4614      	mov	r4, r2
 80033aa:	460e      	mov	r6, r1
 80033ac:	b921      	cbnz	r1, 80033b8 <_realloc_r+0x14>
 80033ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033b2:	4611      	mov	r1, r2
 80033b4:	f7ff bf9c 	b.w	80032f0 <_malloc_r>
 80033b8:	b922      	cbnz	r2, 80033c4 <_realloc_r+0x20>
 80033ba:	f7ff ff4d 	bl	8003258 <_free_r>
 80033be:	4625      	mov	r5, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c4:	f000 f826 	bl	8003414 <_malloc_usable_size_r>
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d20f      	bcs.n	80033ec <_realloc_r+0x48>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4638      	mov	r0, r7
 80033d0:	f7ff ff8e 	bl	80032f0 <_malloc_r>
 80033d4:	4605      	mov	r5, r0
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0f2      	beq.n	80033c0 <_realloc_r+0x1c>
 80033da:	4631      	mov	r1, r6
 80033dc:	4622      	mov	r2, r4
 80033de:	f7ff ff17 	bl	8003210 <memcpy>
 80033e2:	4631      	mov	r1, r6
 80033e4:	4638      	mov	r0, r7
 80033e6:	f7ff ff37 	bl	8003258 <_free_r>
 80033ea:	e7e9      	b.n	80033c0 <_realloc_r+0x1c>
 80033ec:	4635      	mov	r5, r6
 80033ee:	e7e7      	b.n	80033c0 <_realloc_r+0x1c>

080033f0 <_sbrk_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	2300      	movs	r3, #0
 80033f4:	4c05      	ldr	r4, [pc, #20]	; (800340c <_sbrk_r+0x1c>)
 80033f6:	4605      	mov	r5, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	f7fd ff14 	bl	8001228 <_sbrk>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_sbrk_r+0x1a>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	b103      	cbz	r3, 800340a <_sbrk_r+0x1a>
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000218 	.word	0x20000218

08003410 <__malloc_lock>:
 8003410:	4770      	bx	lr

08003412 <__malloc_unlock>:
 8003412:	4770      	bx	lr

08003414 <_malloc_usable_size_r>:
 8003414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003418:	1f18      	subs	r0, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfbc      	itt	lt
 800341e:	580b      	ldrlt	r3, [r1, r0]
 8003420:	18c0      	addlt	r0, r0, r3
 8003422:	4770      	bx	lr

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
